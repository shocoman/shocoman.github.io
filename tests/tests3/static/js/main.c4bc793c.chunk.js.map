{"version":3,"sources":["react-individual-character-input-boxes/InputBox.js","react-individual-character-input-boxes/ReactIndividualCharacterInputBoxes.js","FloatRepresentation/FloatRepresentation.js","App.js","reportWebVitals.js","index.js"],"names":["InputBox","id","type","handleChange","handleKeyDown2","handleFocus","name","inputRef","inputProps","useState","digit","setDigit","digitChange","val","d","toString","onDigitIncrement","operation","num","Number","parseInt","className","onClick","onKeyDown","e","key","onChange","onFocus","maxLength","ref","value","ReactIndividualCharacterInputBoxes","props","state","characterArray","Array","amount","fill","handleKeyDown","bind","inputElements","this","autoFocus","select","nextProps","inputRegExp","items","i","push","password","el","style","display","renderItems","setState","prevState","map","char","handleOutputString","join","target","previousElementSibling","focusPrevChar","setModuleOutput","focusNextChar","setTimeout","focus","nextElementSibling","character","number","placeholder","Component","defaultProps","FloatRepresentation","gridSize","marks","console","log","selectedInput","setSelectedInput","padEnd","inputText","setInputText","textToShow","setTextToShow","updateTextToShow","beforeComma","substr","afterComma","length","selectedInputStyle","color","border","margin","fontSize","fontFamily","defaultValue","step","newSelectedInput","Math","floor","reverse","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c4bc793c.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport PropTypes from 'prop-types';\n\nimport styled from 'styled-components';\n\nimport './digitInput.css';\n\n\nconst InputBox = ({id, type, handleKeyDown2, handleChange, handleFocus, name, inputRef, inputProps}) => {\n\n    const min = 0, max = 9;\n\n    const [digit, setDigit] = useState('0');\n\n    const digitChange = (val) => {\n        if (val < min) val = max;\n        else if (val > max) val = min;\n        let d = val.toString();\n        setDigit(d);\n        handleChange(id, d);\n    }\n\n    const onDigitIncrement = (operation) => {\n        let num = Number.parseInt(digit) || 0;\n        if (operation === '+') {\n            num++;\n        } else if (operation === '-') {\n            num--;\n        }\n        digitChange(num);\n    };\n\n    const handleKeyDown = (e) => {\n        const {key} = e;\n        if (key >= '0' && key <= '9') {\n            digitChange(Number.parseInt(key));\n        } else if (key === 'ArrowUp') {\n            onDigitIncrement('+');\n        } else if (key === 'ArrowDown') {\n            onDigitIncrement('-');\n        }\n    }\n\n    return (\n        <div {...inputProps} className={'inputField'}>\n            <span onClick={() => onDigitIncrement('+')} className={'plusButton'}>+</span>\n            <input className={'digitInput'}\n                   type={type}\n                   onKeyDown={handleKeyDown}\n                   onChange={handleChange}\n                   onFocus={handleFocus}\n                   maxLength='1'\n                   name={name}\n                   ref={inputRef}\n                   value={digit}\n            />\n\n            <span onClick={() => onDigitIncrement('-')} className={'minusButton'}>-</span>\n        </div>\n    )\n\n}\n\n\nexport default InputBox;\n","import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport InputBox from './InputBox';\n\nclass ReactIndividualCharacterInputBoxes extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {characterArray: Array(props.amount).fill('0')}\n\n        this.handleKeyDown = this.handleKeyDown.bind(this)\n        this.handleFocus = this.handleFocus.bind(this)\n        this.handleChange = this.handleChange.bind(this)\n        this.inputElements = {}\n    }\n\n    componentDidMount() {\n        if (this.props.autoFocus) {\n            this.inputElements['input0'].select()\n        }\n    }\n\n    shouldComponentUpdate(nextProps) {\n        return this.props.amount !== nextProps.amount ||\n            this.props.inputRegExp !== nextProps.inputRegExp;\n    }\n\n    renderItems() {\n        let items = [];\n\n        for (let i = 0; i < this.props.amount; i++) {\n            items.push(\n                <InputBox\n                    id={i}\n                    type={this.props.password ? 'password' : 'text'}\n                    key={i}\n                    handleKeyDown={this.handleKeyDown}\n                    handleFocus={this.handleFocus}\n                    handleChange={this.handleChange}\n                    name={'input' + i}\n                    inputProps={this.props.inputProps && this.props.inputProps[i]}\n                    inputRef={el => {\n                        if (!el) return;\n                        this.inputElements[el.name] = el\n                    }}\n                />\n            )\n        }\n\n        return items;\n    }\n\n    render() {\n        return (<div style={{display: 'flex'}}>{this.renderItems()}</div>);\n    }\n\n    handleChange(id, digit) {\n        this.setState(prevState => {\n            let newChars = prevState.characterArray.map((char, i) => {\n                    if (i === id) return digit;\n                    return char || '0';\n                }\n            )\n            return {characterArray: newChars};\n        }, () => this.props.handleOutputString(this.state.characterArray.join('')));\n    }\n\n    handleKeyDown({target, key}) {\n        // console.log('Key down', key);\n\n        if (key === 'Backspace') {\n            if (target.value === '' && target.previousElementSibling !== null) {\n                target.previousElementSibling.value = ''\n                this.focusPrevChar(target)\n            } else {\n                target.value = ''\n            }\n            this.setModuleOutput(target)\n        } else if (key === 'ArrowLeft') {\n            this.focusPrevChar(target);\n        } else if (key === 'ArrowRight' || key === ' ') {\n            this.focusNextChar(target);\n        }\n    }\n\n    handleFocus({target}) {\n        const el = target;\n        // In most browsers .select() does not work without the added timeout.\n        setTimeout(function () {\n            el.select()\n        }, 0)\n    }\n\n    focusPrevChar(target) {\n        if (target.previousElementSibling !== null) {\n            target.previousElementSibling.focus()\n        }\n    }\n\n    focusNextChar(target) {\n        if (target.nextElementSibling !== null) {\n            target.nextElementSibling.focus()\n        }\n    }\n\n    setModuleOutput() {\n        this.setState(prevState => {\n            let updatedCharacters = prevState.characterArray.map(\n                (character, number) => {\n                    if (this.inputElements['input' + number].value === '')\n                        return this.inputElements['input' + number].placeholder;\n                    return this.inputElements['input' + number].value\n                }\n            );\n            return {characterArray: updatedCharacters};\n        }, () => this.props.handleOutputString(this.state.characterArray.join('')))\n    }\n}\n\nReactIndividualCharacterInputBoxes.defaultProps = {\n    amount: 5,\n    autoFocus: false,\n    inputRegExp: /^[0-9]$/,\n    password: false\n}\nReactIndividualCharacterInputBoxes.propTypes = {\n    amount: PropTypes.number,\n    autoFocus: PropTypes.bool,\n    inputRegExp: PropTypes.instanceOf(RegExp),\n    password: PropTypes.bool,\n    handleOutputString: PropTypes.func.isRequired\n}\n\nexport default ReactIndividualCharacterInputBoxes\n","import React, {useState} from \"react\";\r\nimport RICIBs from '../react-individual-character-input-boxes/ReactIndividualCharacterInputBoxes';\r\nimport Slider from 'rc-slider';\r\nimport './SliderHandle.css';\r\n\r\n\r\nexport default function FloatRepresentation({gridSize}) {\r\n\r\n    const [marks, setMarks] = useState(() => {\r\n        let marks = {};\r\n        for (let i = 0; i < gridSize+1; ++i) {\r\n            let l = i * 100 / (gridSize);\r\n            marks[l] = i;\r\n        }\r\n        console.log(marks);\r\n        return marks;\r\n    });\r\n\r\n    const [selectedInput, setSelectedInput] = useState(0);\r\n    const [inputText, setInputText] = useState(''.padEnd(gridSize, '0'));\r\n    const [textToShow, setTextToShow] = useState();\r\n\r\n    const slideOnChange = value => {\r\n        let newSelectedInput = Math.floor(((100 - value) / 100) * (gridSize + 1));\r\n        setSelectedInput(newSelectedInput);\r\n        updateTextToShow(inputText, newSelectedInput);\r\n    };\r\n\r\n    const inputChanged = (val) => {\r\n        setInputText(val);\r\n        updateTextToShow(val, selectedInput);\r\n    };\r\n\r\n    const updateTextToShow = (val, select) => {\r\n        let beforeComma = val.substr(0, select)\r\n        let afterComma = val.substr(select);\r\n\r\n        setTextToShow(`Exponent (${beforeComma.length} digits): ${beforeComma}; \r\n            Fraction (${afterComma.length} digits): ${afterComma}`);\r\n    };\r\n\r\n    const selectedInputStyle = {color: \"orange\", border: '3px orange solid'};\r\n    let inputProps = {};\r\n    for (let i = 0; i < gridSize; i++) {\r\n        inputProps[i] = {placeholder: '0'};\r\n        if (i === 0 || i === selectedInput)\r\n            inputProps[i].style = selectedInputStyle;\r\n    }\r\n\r\n    return (\r\n        <div style={{margin: '20px'}}>\r\n\r\n            <div style={{margin: '10px', fontSize: '30px', fontFamily: \"'Comic Sans MS', Arial\" }}>\r\n                {textToShow}\r\n            </div>\r\n\r\n            <div>\r\n                <RICIBs\r\n                    amount={gridSize}\r\n                    autoFocus\r\n                    handleOutputString={inputChanged}\r\n                    inputProps={inputProps}\r\n                    inputRegExp={/^[0-9]$/}\r\n                />\r\n            </div>\r\n\r\n            <Slider\r\n                marks={marks} defaultValue={100} step={100 / (gridSize)}\r\n                onChange={slideOnChange}\r\n                reverse={true}\r\n            />\r\n\r\n\r\n        </div>\r\n    )\r\n}","import './App.css';\nimport React, {useState} from \"react\";\nimport ConvertDecimalTable from \"./ConvertDecimalTable/ConvertDecimalTable\";\nimport FloatRepresentation from \"./FloatRepresentation/FloatRepresentation\";\n\n\nexport default function App() {\n\n    return (\n        // <ConvertDecimalTable radix={5} convertible={123} />\n        <FloatRepresentation gridSize={16} />\n    );\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}