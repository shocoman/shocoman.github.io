{"version":3,"sources":["react-individual-character-input-boxes/InputBox.js","react-individual-character-input-boxes/ReactIndividualCharacterInputBoxes.js","FloatRepresentation/FloatRepresentation.js","App.js","reportWebVitals.js","index.js"],"names":["Input","styled","input","InputBox","type","handleKeyDown","handleChange","handleFocus","name","inputRef","inputProps","onKeyDown","onChange","onFocus","maxLength","ref","ReactIndividualCharacterInputBoxes","props","state","characterArray","Array","amount","fill","bind","inputElements","this","autoFocus","select","nextProps","inputRegExp","items","i","push","password","el","style","display","renderItems","target","value","match","focusNextChar","setModuleOutput","replace","key","previousElementSibling","focusPrevChar","setTimeout","focus","nextElementSibling","setState","prevState","map","character","number","placeholder","handleOutputString","join","Component","defaultProps","FloatRepresentation","gridSize","useState","marks","console","log","selectedInput","setSelectedInput","padEnd","inputText","setInputText","textToShow","setTextToShow","updateTextToShow","val","beforeComma","substr","afterComma","length","selectedInputStyle","color","border","margin","fontSize","fontFamily","defaultValue","step","newSelectedInput","Math","floor","reverse","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fb6d331e.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport styled from 'styled-components';\n\n// const Input = styled.input`\n//   justify-content: space-between;\n//   width: 45px;\n//   height: 45px;\n//   margin: 5px;\n//   border-radius: 5px;\n//   text-align: center;\n//   font-size: 34px;\n//   font-family: -apple-system, system-ui, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue',\n//     Arial sans-serif;\n// `\n\n\nconst Input = styled.input`\n  justify-content: space-between;\n  margin: 3px;\n  border-radius: 5px;\n  text-align: center;\n  font-size: 34px;\n  font-family: -apple-system, system-ui, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial sans-serif;\n    flex: 1;\n    min-width: 0px;\n`\n\nconst InputBox = ({type, handleKeyDown, handleChange, handleFocus, name, inputRef, inputProps}) => {\n    return (\n        <Input\n            {...inputProps}\n            type={type}\n            onKeyDown={handleKeyDown}\n            onChange={handleChange}\n            onFocus={handleFocus}\n            maxLength='1'\n            name={name}\n            ref={inputRef}\n        />\n    )\n\n}\n\nInputBox.propTypes = {\n    name: PropTypes.string.isRequired,\n    type: PropTypes.string,\n    handleKeyDown: PropTypes.func,\n    handleFocus: PropTypes.func,\n    handleChange: PropTypes.func,\n    inputRef: PropTypes.func,\n    inputProps: PropTypes.object\n}\n\nexport default InputBox;\n","import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport InputBox from './InputBox';\n\nclass ReactIndividualCharacterInputBoxes extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {characterArray: Array(props.amount).fill(null)}\n\n        this.handleKeyDown = this.handleKeyDown.bind(this)\n        this.handleFocus = this.handleFocus.bind(this)\n        this.handleChange = this.handleChange.bind(this)\n        this.inputElements = {}\n    }\n\n    componentDidMount() {\n        if (this.props.autoFocus) {\n            this.inputElements['input0'].select()\n        }\n    }\n\n    shouldComponentUpdate(nextProps) {\n        return this.props.amount !== nextProps.amount ||\n            this.props.inputRegExp !== nextProps.inputRegExp;\n    }\n\n    renderItems() {\n        let items = [];\n\n        for (let i = 0; i < this.props.amount; i++) {\n            items.push(\n                <InputBox\n                    type={this.props.password ? 'password' : 'text'}\n                    key={i}\n                    handleKeyDown={this.handleKeyDown}\n                    handleFocus={this.handleFocus}\n                    handleChange={this.handleChange}\n                    name={'input' + i}\n                    inputProps={this.props.inputProps && this.props.inputProps[i]}\n                    inputRef={el => {\n                        if (!el) return;\n                        this.inputElements[el.name] = el\n                    }}\n                />\n            )\n        }\n\n        return items;\n    }\n\n    render() {\n        return (<div style={{display: 'flex'}}>{this.renderItems()}</div>);\n    }\n\n    handleChange({target}) {\n        if (target.value.match(this.props.inputRegExp)) {\n            this.focusNextChar(target)\n            this.setModuleOutput(target)\n        } else {\n            target.value = this.state.characterArray[target.name.replace('input', '')]\n        }\n    }\n\n    handleKeyDown({target, key}) {\n        // console.log('Key down', key);\n\n        if (key === 'Backspace') {\n            if (target.value === '' && target.previousElementSibling !== null) {\n                target.previousElementSibling.value = ''\n                this.focusPrevChar(target)\n            } else {\n                target.value = ''\n            }\n            this.setModuleOutput(target)\n        } else if (key === 'ArrowLeft') {\n            this.focusPrevChar(target)\n        } else if (key === 'ArrowRight' || key === ' ') {\n            this.focusNextChar(target)\n        }\n    }\n\n    handleFocus({target}) {\n        const el = target;\n        // In most browsers .select() does not work without the added timeout.\n        setTimeout(function () {\n            el.select()\n        }, 0)\n    }\n\n    focusPrevChar(target) {\n        if (target.previousElementSibling !== null) {\n            target.previousElementSibling.focus()\n        }\n    }\n\n    focusNextChar(target) {\n        if (target.nextElementSibling !== null) {\n            target.nextElementSibling.focus()\n        }\n    }\n\n    setModuleOutput() {\n        this.setState(prevState => {\n            let updatedCharacters = prevState.characterArray.map(\n                (character, number) => {\n                    if (this.inputElements['input' + number].value === '')\n                        return this.inputElements['input' + number].placeholder;\n                    return this.inputElements['input' + number].value\n                }\n            );\n            return {characterArray: updatedCharacters};\n        }, () => this.props.handleOutputString(this.state.characterArray.join('')))\n    }\n}\n\nReactIndividualCharacterInputBoxes.defaultProps = {\n    amount: 5,\n    autoFocus: false,\n    inputRegExp: /^[0-9]$/,\n    password: false\n}\nReactIndividualCharacterInputBoxes.propTypes = {\n    amount: PropTypes.number,\n    autoFocus: PropTypes.bool,\n    inputRegExp: PropTypes.instanceOf(RegExp),\n    password: PropTypes.bool,\n    handleOutputString: PropTypes.func.isRequired\n}\n\nexport default ReactIndividualCharacterInputBoxes\n","import React, {useState} from \"react\";\r\nimport RICIBs from '../react-individual-character-input-boxes/ReactIndividualCharacterInputBoxes';\r\nimport Slider, {Range} from 'rc-slider';\r\n\r\n// import 'rc-slider/assets/index.css';\r\nimport './SliderHandle.css';\r\n\r\n\r\nexport default function FloatRepresentation({gridSize}) {\r\n\r\n    const [marks, setMarks] = useState(() => {\r\n        let marks = {};\r\n        for (let i = 0; i < gridSize+1; ++i) {\r\n            let l = i * 100 / (gridSize);\r\n            marks[l] = i;\r\n        }\r\n        console.log(marks);\r\n        return marks;\r\n    });\r\n\r\n    const [selectedInput, setSelectedInput] = useState(0);\r\n    const [inputText, setInputText] = useState(''.padEnd(gridSize, '0'));\r\n    const [textToShow, setTextToShow] = useState();\r\n\r\n    const slideOnChange = value => {\r\n        let newSelectedInput = Math.floor(((100 - value) / 100) * (gridSize + 1));\r\n        setSelectedInput(newSelectedInput);\r\n        updateTextToShow(inputText, newSelectedInput);\r\n    };\r\n\r\n    const inputChanged = (val) => {\r\n        setInputText(val);\r\n        updateTextToShow(val, selectedInput);\r\n    };\r\n\r\n    const updateTextToShow = (val, select) => {\r\n        let beforeComma = val.substr(0, select)\r\n        let afterComma = val.substr(select);\r\n\r\n\r\n        setTextToShow(`Exponent (${beforeComma.length} digits): ${beforeComma}; \r\n            Fraction (${afterComma.length} digits): ${afterComma}`);\r\n    };\r\n\r\n    const selectedInputStyle = {color: \"orange\", border: '3px orange double'};\r\n    let inputProps = {};\r\n    for (let i = 0; i < gridSize; i++) {\r\n        inputProps[i] = {placeholder: '0'};\r\n        if (i === 0 || i === selectedInput)\r\n            inputProps[i].style = selectedInputStyle;\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <div style={{margin: '20px'}}>\r\n\r\n            <div style={{margin: '10px', fontSize: '30px', fontFamily: \"'Comic Sans MS', Arial\" }}>\r\n                {textToShow}\r\n            </div>\r\n\r\n            <div>\r\n                <RICIBs\r\n                    amount={gridSize}\r\n                    autoFocus\r\n                    handleOutputString={inputChanged}\r\n                    inputProps={inputProps}\r\n                    inputRegExp={/^[0-9]$/}\r\n                />\r\n            </div>\r\n\r\n            <Slider\r\n                marks={marks} defaultValue={100} step={100 / (gridSize)}\r\n                onChange={slideOnChange}\r\n                reverse={true}\r\n            />\r\n\r\n\r\n        </div>\r\n    )\r\n}","import './App.css';\nimport React, {useState} from \"react\";\nimport ConvertDecimalTable from \"./ConvertDecimalTable/ConvertDecimalTable\";\nimport FloatRepresentation from \"./FloatRepresentation/FloatRepresentation\";\n\n\nexport default function App() {\n\n    return (\n        // <ConvertDecimalTable radix={5} convertible={123} />\n        <FloatRepresentation gridSize={16} />\n    );\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}