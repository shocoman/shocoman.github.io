{"version":3,"sources":["Question/Question.js","TestAddition/TestBlock.js","App/App.js","serviceWorker.js","index.js"],"names":["AnswerStatus","Object","freeze","WRONG","NONE","RIGHT","Question","onchange","value","keyId","questionText","status","answer","backColor","statusStyle","background","console","log","split","className","map","q","style","htmlFor","name","id","onChange","RandRange","a","b","callback","this","num","Math","random","questinator","getParams","strings","paramNums","params","finalString","i","length","push","undefined","toString","text","join","randInt","randBool","powerOfTwo","n","pow","infQuestions","getNum","log2","ans","c","encodingQuestions","floor","ceil","letterSubs","index","radixQuestions","lLen","rLen","lString","rString","machineArithm","defaultNum","reverseCode","ch","complementCode","firstZeroAtIndex","reverse","findIndex","e","fstZero","QuestionState","question","rightAnswer","userAnswer","generateQuestions","op","questions","qs","TestBlock","opType","useState","setQuestions","answered","setAnswered","setAnsweredRight","onInputsChange","event","answersCopy","target","elems","key","onClick","questionsCopy","trim","filter","App","setOpType","buttons","setOpNum","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.a99d6961.chunk.js","sourcesContent":["import React, {useState} from \"react\";\r\nimport './Question.css';\r\n\r\nexport const AnswerStatus = Object.freeze({\r\n    WRONG: 1,\r\n    NONE: 2,\r\n    RIGHT: 3\r\n});\r\n\r\nexport default function Question({onchange, value, keyId, questionText, status, answer}) {\r\n    const backColor = (status === AnswerStatus.NONE ? 'initial' : ( status === AnswerStatus.RIGHT ? 'lightgreen' : '#fa898b' ));\r\n    let statusStyle = {\r\n        background: backColor,\r\n    };\r\n    console.log(questionText.split('\\n'))\r\n    return (\r\n        <div className='testCard'>\r\n            <div className='questionText'>\r\n                {questionText.split('\\n').map(q =>\r\n                    <div> {q} </div>\r\n                )}\r\n                {answer && <div style={{'color': backColor}}> - Правильный ответ: {answer}</div>}\r\n            </div>\r\n\r\n            <div className='inputField'>\r\n                <label htmlFor='answerField'> Введите ответ: </label>\r\n                <input name={'answerField'} id={keyId} value={value} onChange={onchange} style={statusStyle} />\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React, {useState} from \"react\";\r\nimport Question, {AnswerStatus} from \"../Question/Question\";\r\nimport './TestBlock.css';\r\n\r\n\r\nclass RandRange {\r\n    constructor(a, b, callback) {\r\n        this.a = a;\r\n        this.b = b;\r\n        this.callback = callback;\r\n    }\r\n\r\n    getNum() {\r\n        let num = Math.random() * (this.b - this.a) + this.a;\r\n        return this.callback(num);\r\n    }\r\n}\r\n\r\n\r\nfunction questinator(getParams) {\r\n    return (strings, ...paramNums) => {\r\n        return () => {\r\n            let [params, answer] = getParams();\r\n\r\n            let finalString = [];\r\n            for (let i = 0; i < strings.length; i++) {\r\n                finalString.push(strings[i]);\r\n                if (paramNums[i] !== undefined) {\r\n                    finalString.push(params[paramNums[i]].toString());\r\n                }\r\n            }\r\n            return {\r\n                answer: answer,\r\n                text: finalString.join('')\r\n            };\r\n        }\r\n    }\r\n}\r\n\r\nfunction randInt(a, b) {\r\n    return (Math.random() * (b - a) + a) | 0;\r\n}\r\n\r\nfunction randBool() {\r\n    return Math.random() > 0.5;\r\n}\r\n\r\nfunction powerOfTwo(n) {\r\n    return Math.pow(2, n | 0);\r\n}\r\n\r\nconst infQuestions = [\r\n    questinator( () => {\r\n        let num = new RandRange(1, 11, (n) => n | 0).getNum();\r\n        return [[num], Math.pow(2, num) ];\r\n    })`Из скольких букв состоит равновероятный алфавит, если одна буква этого алфавита несет ${0} бита информации?`,\r\n\r\n    questinator(() => {\r\n        let a = new RandRange(4, 8, (n) => Math.pow(2, n | 0)).getNum();\r\n        let b = new RandRange(3, 7, (n) => Math.log2(a | 0) * (n | 0) ).getNum();\r\n\r\n        let ans = b / Math.log2(a | 0);\r\n        return [[a,b], ans];\r\n    })`Сообщение составлено из символов равновероятного алфавита. Чему равно количество символов в этом сообщении, если известно, что алфавит состоит из ${0} символов, а сообщение несет ${1} бита информации`,\r\n\r\n    questinator(() => {\r\n        let a = new RandRange(2, 12, powerOfTwo).getNum();\r\n        let b = new RandRange(2, 12, powerOfTwo).getNum();\r\n        let c = new RandRange(1, 6, powerOfTwo).getNum();\r\n\r\n        let ans =  a * b * Math.log2(c);\r\n        return [[a, b, c], ans];\r\n    })`Какое количество информации заключается в черно-белом изображении на телеэкране, если экран содержит ${0} линий, каждая линия – ${1} экранных точек, а каждая точка имеет ${2} градаций яркости?`,\r\n\r\n    questinator(() => {\r\n        let a = new RandRange(2, 100, n => n | 0).getNum();\r\n        let b = new RandRange(1, 6, powerOfTwo).getNum();\r\n        let ans =  a * Math.log2(b);\r\n        return [[a,b],ans];\r\n    })`Определить максимальную энтропию системы, состоящей из ${0} элементов, каждый из которых может находиться в одном из ${1}-х состояний.`,\r\n]\r\n\r\nconst encodingQuestions = [\r\n    questinator(() => {\r\n        let a = new RandRange(5, 70, n => n | 0).getNum();\r\n        let b = new RandRange(7, 20, n => n | 0).getNum();\r\n        let amountInfo = Math.floor(Math.log2(a) * b * 100) / 100;\r\n        let volumeInfo = Math.ceil(Math.log2(a)) * b;\r\n        return [[a,b], [amountInfo, volumeInfo].join(';')];\r\n    })`Составить равномерный двоичный код для передачи сообщений некоторого ${0}-буквенного алфавита. Чему равны количество и объем информации при передачи ${1}-буквенного слова этого алфавита, если все его символы равновероятны? Округлить до сотых.`,\r\n\r\n    questinator(() => {\r\n        let a = new RandRange(8, 88, n => n | 0).getNum();\r\n        let ternary = Math.ceil(Math.log2(a)/Math.log2(3));\r\n        let binary = Math.ceil(Math.log2(a));\r\n        return [[a], [ternary, binary].join(';')];\r\n    })`Определить минимальную разрядность равномерного троичного кода для кодирования алфавита из ${0} букв. Как изменится результат, если код будет двоичным?`,\r\n\r\n    questinator(() => {\r\n        let letterSubs = [['A', 'H'],\r\n            ['B', 'G'],\r\n            ['C', 'F'],\r\n            ['D', 'E'],\r\n            ['E', 'D'],\r\n            ['F', 'C'],\r\n            ['G', 'B'],\r\n            ['H', 'A']];\r\n\r\n        let a = '';\r\n        let ans = '';\r\n        for (let i = 0; i < 5; i++) {\r\n            let index = (Math.random() * letterSubs.length) | 0;\r\n            a += letterSubs[index][0];\r\n            ans += letterSubs[index][1];\r\n        }\r\n\r\n        return [[a], ans];\r\n    })`Закодировать сообщение ${0} с помощью шифров простой замены: \\n A B C D E F G H \\n H G F E D C B A`,\r\n]\r\n\r\nconst radixQuestions = [\r\n    questinator(() => {\r\n        let example = '101.111';\r\n        let lLen = randInt(2, 5);\r\n        let rLen = randInt(2, 5);\r\n\r\n        let ans = 0;\r\n        let lString = '';\r\n        for (let i = 0; i < lLen; i++) {\r\n            let b = randBool();\r\n            if (b || i === 0) {\r\n                lString += '1';\r\n                ans += Math.pow(2, lLen - i -1);\r\n            } else {\r\n                lString += '0';\r\n            }\r\n        }\r\n\r\n        let rString = '';\r\n        for (let i = 0; i < rLen; i++) {\r\n            let b = randBool();\r\n            if (b) {\r\n                rString += '1';\r\n                ans += Math.pow(2, -i - 1);\r\n            } else {\r\n                rString += '0';\r\n            }\r\n        }\r\n\r\n        return [[lString + '.' + rString], ans];\r\n\r\n    })`Перевести число ${0} из двоичной в десятичную систему счисления`,\r\n\r\n    questinator(() => {\r\n        let example = '101.111';\r\n        let lLen = randInt(2, 5);\r\n        let rLen = randInt(2, 5);\r\n\r\n        let ans = 0;\r\n        let lString = '';\r\n        for (let i = 0; i < lLen; i++) {\r\n            let b = randBool();\r\n            if (b || i === 0) {\r\n                lString += '1';\r\n                ans += Math.pow(2, lLen - i -1);\r\n            } else {\r\n                lString += '0';\r\n            }\r\n        }\r\n\r\n        let rString = '';\r\n        for (let i = 0; i < rLen; i++) {\r\n            let b = randBool();\r\n            if (b) {\r\n                rString += '1';\r\n                ans += Math.pow(2, -i - 1);\r\n            } else {\r\n                rString += '0';\r\n            }\r\n        }\r\n\r\n        return [[ans], lString + '.' + rString];\r\n\r\n    })`Перевести число ${0} из десятичной в двоичную систему счисления`,\r\n\r\n    questinator(() => {\r\n        let lLen = randInt(2, 5);\r\n        let rLen = randInt(2, 5);\r\n\r\n        let ans = 0;\r\n        let lString = '';\r\n        for (let i = 0; i < lLen; i++) {\r\n            let b = randBool();\r\n            if (b || i === 0) {\r\n                lString += '1';\r\n                ans += Math.pow(2, lLen - i -1);\r\n            } else {\r\n                lString += '0';\r\n            }\r\n        }\r\n\r\n        let rString = '';\r\n        for (let i = 0; i < rLen; i++) {\r\n            let b = randBool();\r\n            if (b) {\r\n                rString += '1';\r\n                ans += Math.pow(2, -i - 1);\r\n            } else {\r\n                rString += '0';\r\n            }\r\n        }\r\n        let a = lString + '.' + rString;\r\n\r\n        lString = '';\r\n        for (let i = 0; i < lLen; i++) {\r\n            let b = randBool();\r\n            if (b || i === 0) {\r\n                lString += '1';\r\n                ans += Math.pow(2, lLen - i -1);\r\n            } else {\r\n                lString += '0';\r\n            }\r\n        }\r\n\r\n        rString = '';\r\n        for (let i = 0; i < rLen; i++) {\r\n            let b = randBool();\r\n            if (b) {\r\n                rString += '1';\r\n                ans += Math.pow(2, -i - 1);\r\n            } else {\r\n                rString += '0';\r\n            }\r\n        }\r\n        let b = lString + '.' + rString;\r\n\r\n        return [[a, b], ans];\r\n\r\n    })`Сложить числа ${0} и ${1} в двоичной СС в столбик и перевести результат в десятичную систему счисления`\r\n]\r\n\r\nconst machineArithm = [\r\n    questinator(() => {\r\n        let lLen = randInt(2, 5);\r\n        let rLen = randInt(2, 5);\r\n\r\n        let ans = 0;\r\n        let lString = '';\r\n        for (let i = 0; i < lLen; i++) {\r\n            let b = randBool();\r\n            if (b || i === 0) {\r\n                lString += '1';\r\n                ans += Math.pow(2, lLen - i -1);\r\n            } else {\r\n                lString += '0';\r\n            }\r\n        }\r\n\r\n        let rString = '';\r\n        for (let i = 0; i < rLen; i++) {\r\n            let b = randBool();\r\n            if (b) {\r\n                rString += '1';\r\n                ans += Math.pow(2, -i - 1);\r\n            } else {\r\n                rString += '0';\r\n            }\r\n        }\r\n\r\n        let defaultNum = lString + '.' + rString;\r\n        let reverseCode = defaultNum.split('').map(ch => ch === '1' ? '0' : ch === '0' ? '1' : ch).join('');\r\n        let complementCode = '';\r\n        let firstZeroAtIndex = reverseCode.split('').reverse().findIndex(e => e === '0');\r\n\r\n        let fstZero = reverseCode.length - firstZeroAtIndex - 1;\r\n        if (firstZeroAtIndex < 0) {\r\n            complementCode = '1' + reverseCode;\r\n        } else {\r\n            for (let i = 0; i < reverseCode.length; i++) {\r\n                if (reverseCode[i] === '.') complementCode += reverseCode[i];\r\n                else if (i < fstZero) complementCode += reverseCode[i];\r\n                else if (i === fstZero) complementCode += '1';\r\n                else complementCode += '0';\r\n            }\r\n        }\r\n\r\n        return [[defaultNum], [defaultNum, reverseCode, complementCode].join(';')]\r\n    })`Записать прямой, дополнительный и обратный код для двоичного числа ${0}. В качестве разделителя использовать точку с запятой`\r\n]\r\n\r\n\r\n\r\n\r\nclass QuestionState {\r\n    constructor(question, answer) {\r\n        this.question = question;\r\n        this.rightAnswer = answer;\r\n        this.userAnswer = '';\r\n        this.status = AnswerStatus.NONE;\r\n    }\r\n}\r\n\r\nfunction generateQuestions(num, op) {\r\n    let questions = [];\r\n    let qs = [infQuestions, encodingQuestions, radixQuestions, machineArithm];\r\n    for (let q of qs[op]) {\r\n        let { answer, text } = q();\r\n        questions.push(new QuestionState(text, answer));\r\n    }\r\n    return questions;\r\n}\r\n\r\n\r\nexport default function TestBlock ({opType, num}) {\r\n    const [questions, setQuestions] = useState(generateQuestions(num, opType));\r\n    const [answered, setAnswered] = useState(false);\r\n    const [answeredRight, setAnsweredRight] = useState(false);\r\n\r\n    const onInputsChange = event => {\r\n        let answersCopy = [...questions];\r\n        answersCopy[event.target.id].userAnswer = event.target.value;\r\n        setQuestions(answersCopy);\r\n    };\r\n\r\n    const onClickCheckResults = () => {\r\n        if (answered) {\r\n            setAnswered(false);\r\n            setAnsweredRight(false);\r\n            setQuestions(generateQuestions(num, opType));\r\n        } else {\r\n            setAnswered(true);\r\n            let questionsCopy = [...questions];\r\n            for (let q of questionsCopy) {\r\n                q.status = q.userAnswer.trim() === q.rightAnswer.toString() ? AnswerStatus.RIGHT : AnswerStatus.WRONG;\r\n            }\r\n            setQuestions(questionsCopy);\r\n            if (questions.filter(q => q.status === AnswerStatus.RIGHT).length === num) {\r\n                setAnsweredRight(true);\r\n            }\r\n        }\r\n    };\r\n\r\n    let elems = questions.map((q, i) =>\r\n        <li key={i}>\r\n            <Question value={q.userAnswer}\r\n                      keyId={i}\r\n                      questionText={q.question}\r\n                      onchange={onInputsChange}\r\n                      answer={answered && q.rightAnswer}\r\n                      status={q.status || AnswerStatus.NONE}/>\r\n        </li>\r\n    );\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <ul> {elems} </ul>\r\n            <button className={'checkResults'} onClick={onClickCheckResults}>\r\n                {answered ? \"Заново\" : \"Проверить\"}\r\n            </button>\r\n            {answered &&\r\n            <div> {questions.filter(q => q.status === AnswerStatus.RIGHT).length} правильно из {questions.length} </div>}\r\n        </div>\r\n    );\r\n}","import React, {useState} from 'react';\nimport TestAddition from \"../TestAddition/TestBlock\";\nimport './App.css';\n\n\n\nfunction App() {\n\n    const opTypes = [\n        ['+', (a, b) => a+b],\n        ['-', (a, b) => a-b],\n        ['*', (a, b) => a*b],\n        ['/', (a, b) => a/b],\n    ];\n\n    const [opType, setOpType] = useState(0);\n\n    const setOpNum = (i) => {\n        if (opType !== i) {\n            setOpType(i);\n        }\n    }\n\n    let buttons = ['Измерение информации', 'Основы кодирования', 'Позиционные системы счисления', 'Основы машинной арифметики'].map((name, i) => {\n         let style = {'backgroundColor': i === opType ? '#cab6b6' : ''}\n         return (<button style={style} key={i} onClick={() => { setOpNum(i) }}>{name}</button>);\n    })\n\n\n    return (\n        <div className={'root'}>\n            <div className={'chooseTestType'}>\n                <label>Выбери тему:</label>\n                {buttons}\n            </div>\n\n            <div className='TestBlock'>\n                <TestAddition key={opTypes[opType]} opType={opType} num={3}/>\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}