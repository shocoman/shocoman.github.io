{"version":3,"sources":["Tasks/utilities.js","components/Question/ConvertDecimalTable.js","components/Question/HuffmanTree.js","components/Question/Question.js","components/Question/EncodingTable.js","components/TestBlock/TestBlock.js","Tasks/basic_encoding.js","Tasks/information_measurement.js","Tasks/positional_radix.js","Tasks/allTasks.js","components/App/App.js","components/Settings/Settings.js","components/Main.js","index.js","components/Question/ExpressionEvaluator.js"],"names":["randDouble","a","b","callback","Math","random","randInt","randBool","powerOfTwo","n","pow","shuffleArray","array","prev","repeats","i","length","j","floor","Table","size","letters","Array","fill","map","String","fromCharCode","charCodeAt","from_letters","to_letters","this","from_table","to_table","char","digitToChar","digit","convertRadix","num","fromRadix","toRadix","parseInt","toString","toUpperCase","ConvertDecimalTable","floatConvert","convertible","radix","useState","rows","setRows","decodedNumber","filter","k","join","v","reverse","onRowChange","colNum","rowNum","e","isNaN","Number","target","value","prevRows","newRows","row","onRowKeyPressed","key","keyCode","r","slice","preventDefault","convertTable","className","style","captionSide","onChange","onKeyDown","textAlign","id_count","getNodeKey","node","treeIndex","id","makeNode","title","prob","temporary","subtitle","toPrecision","code","AnswerStatus","Object","freeze","WRONG","NONE","RIGHT","Question","onchange","keyId","status","answer","task","questionText","taskDescription","text","split","q","taskClass","uses_table","table","margin","entries","formatTable","params","uses_calculator","ExpressionEvaluator","uses_convert_table","uses_float_convert_table","uses_huffman_tree","msg","freq","from","ch","treeData","setTreeData","height","marginTop","paddingBottom","onClick","prevTree","next","push","onMoveNode","nextParentNode","prevPath","p","walk","ignoreCollapsed","children","reduce","acc","curr","mywalk","canDrop","nextParent","theme","SortableTreeFullDragTheme","HuffmanTree","htmlFor","name","RandRange","questinator","getParams","strings","paramNums","finalString","undefined","getNum","log2","ans","c","ceil","letterSubs","index","lLen","rLen","lString","rString","defaultNum","reverseCode","complementCode","firstZeroAtIndex","findIndex","fstZero","TestBlock","tasks","answers","tests","display","width","top","taskName","userAnswer","event","taskUpdateAnswer","onAnswerEnter","correctAnswers","Task6","amountInfo","volumeInfo","getText","paramsLength","Task7","ternary","binary","SimpleCipherEncode","decode","_","encode","HuffmanEncoding","NodeTree","left","right","nodes","toStr","sort","v1","key1","c1","key2","c2","huffmanCode","huffman_code_tree","binString","l","solve","alphabetSize","SizeOfAlphabet","bitsInOneLetter","LengthOfMSG","Task3","Task4","Task5","probs","sum","ConvertDecimalToN","number","base","remainderParts","intParts","ConvertNtoDecimal","ConvertDecimalFloatToN","replace","getAllTasks","informationTasks","encodingTasks","radixTasks","flatMap","t","allTasks","initialTasks","url","URL","window","location","href","topics","searchParams","replaceAll","initInitialTasks","App","taskAnswers","setTaskAnswers","generate_task","prevTaskAnswers","isCorrect","newTaskAnswers","hasOwnProperty","check_solution","correctAnswer","isArray","createInitialTasks","ThemeChooser","setChecked","numberEnabled","setNumberEnabled","setText","type","disabled","min","pattern","val","prevState","newState","borderImageOutset","formatLink","pairs","mainLink","origin","check","Settings","задачи","checkedInit","checked","Main","marginRight","to","marginLeft","path","component","ReactDOM","render","StrictMode","document","getElementById","inputNum","setInputNum","evaluationResult","input","eval","fontSize"],"mappings":"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","file":"static/js/main.36fea71f.chunk.js","sourcesContent":["export function questinator(getParams) {\n    return (strings, ...paramNums) => {\n        return () => {\n            let [params, answer] = getParams();\n\n            let finalString = [];\n            for (let i = 0; i < strings.length; i++) {\n                finalString.push(strings[i]);\n                if (paramNums[i] !== undefined) {\n                    finalString.push(params[paramNums[i]].toString());\n                }\n            }\n            return {\n                answer: answer,\n                text: finalString.join(''),\n            };\n        };\n    };\n}\n\nexport function randDouble(a, b, callback = (a) => a) {\n    return callback(Math.random() * (b - a) + a);\n}\n\nexport function randInt(a, b, callback = (a) => a) {\n    return callback((Math.random() * (b - a) + a) | 0);\n}\n\nexport function randBool() {\n    return Math.random() > 0.5;\n}\n\nexport function powerOfTwo(n) {\n    return Math.pow(2, n | 0);\n}\n\nexport function shuffleArray(array) {\n    let prev = [...array];\n    let repeats = true;\n    while (repeats) {\n        repeats = false;\n        for (let i = array.length - 1; i > 0; i--) {\n            const j = Math.floor(Math.random() * (i + 1));\n            [array[i], array[j]] = [array[j], array[i]];\n        }\n\n        for (let i = 0; i < array.length; ++i) {\n            if (prev[i] === array[i]) {\n                repeats = true;\n            }\n        }\n    }\n}\n\nexport class Table {\n    constructor(size) {\n        let letters = new Array(size)\n            .fill(0)\n            .map((a, i) => String.fromCharCode('A'.charCodeAt(0) + i));\n        shuffleArray(letters);\n        let from_letters = [...letters];\n        shuffleArray(letters);\n        let to_letters = [...letters];\n\n        this.from_table = {};\n        this.to_table = {};\n        for (let i = 0; i < letters.length; ++i) {\n            this.from_table[from_letters[i]] = to_letters[i];\n            this.to_table[to_letters[i]] = from_letters[i];\n        }\n    }\n\n    encode(char) {\n        return this.from_table[char]\n    }\n\n    decode(char) {\n        return this.to_table[char]\n    }\n}\n\nexport function digitToChar(digit) {\n    if (digit < 10) {\n        return String.fromCharCode( '0'.charCodeAt(0) + digit );\n    } else if (digit < 36) {\n        return String.fromCharCode( 'A'.charCodeAt(0) + digit - 10 );\n    } else {\n        return '?';\n    }\n}\n\nexport function convertRadix(num, fromRadix, toRadix) {\n    return parseInt(num, fromRadix).toString(toRadix).toUpperCase();\n}\n\nexport function isClass(o) {\n\n    return o.toString().startsWith('class');\n}","import React, { useState } from 'react';\nimport { digitToChar } from '../../Tasks/utilities';\n\nexport default function ConvertDecimalTable(floatConvert, [convertible, radix]) {\n    let initTable = [['', '']];\n    const [rows, setRows] = useState(initTable);\n    let decodedNumber = '';\n    if (rows[0][1] !== '') {\n        if (floatConvert)\n            decodedNumber =\n                '0.' +\n                rows\n                    .filter(([k, _]) => k !== '')\n                    .map(([k, _]) => digitToChar(parseInt(k)))\n                    .join('');\n        else\n            decodedNumber = rows\n                .filter(([_, v]) => v !== '')\n                .map(([_, v]) => digitToChar(parseInt(v)))\n                .reverse()\n                .join('');\n    }\n\n    const onRowChange = (colNum, rowNum, e) => {\n        if (isNaN(Number(e.target.value))) return;\n        let value = e.target.value;\n\n        setRows((prevRows) => {\n            let newRows = prevRows.map((row) => [...row]);\n            newRows[rowNum][colNum] = value;\n            return newRows;\n        });\n    };\n\n    const onRowKeyPressed = (rowNum, e) => {\n        if (rowNum === rows.length - 1) {\n            if (e.key === 'Enter') {\n                setRows((prevRows) => [...prevRows, ['', '']]);\n            } else if (e.keyCode === 8 && rows.length > 1 && e.target.value === '') {\n                // backspace\n                setRows((prevRows) => prevRows.map((r) => [...r]).slice(0, -1));\n                e.preventDefault();\n            }\n        }\n    };\n\n    const convertTable = (\n        <table className='nes-table is-bordered is-centered'>\n            <caption style={{ captionSide: 'top' }}>Таблица перевода</caption>\n            <thead>\n                {floatConvert ? (\n                    <tr>\n                        <td>Целая часть</td>\n                        <td>\n                            Дробная часть ({convertible} * {radix})\n                        </td>\n                    </tr>\n                ) : (\n                    <tr>\n                        <td>Делимое</td>\n                        <td>Остаток</td>\n                    </tr>\n                )}\n            </thead>\n            <tbody>\n                {rows.map(([a, b], i) => (\n                    <tr key={i}>\n                        <td>\n                            <input\n                                value={a}\n                                onChange={(e) => onRowChange(0, i, e)}\n                                onKeyDown={(e) => onRowKeyPressed(i, e)}\n                                className={'nes-input'}\n                                style={{ textAlign: 'right' }}\n                            />\n                        </td>\n                        <td>\n                            <input\n                                value={b}\n                                onChange={(e) => onRowChange(1, i, e)}\n                                onKeyDown={(e) => onRowKeyPressed(i, e)}\n                                className={'nes-input'}\n                            />\n                        </td>\n                    </tr>\n                ))}\n            </tbody>\n        </table>\n    );\n\n    return (\n        <div className={'convertTable '}>\n            {convertTable}\n            {decodedNumber !== '' && <div>Возможный ответ: {decodedNumber}</div>}\n        </div>\n    );\n}\n","import React, { Component, useState } from 'react';\nimport SortableTree, { walk } from 'react-sortable-tree';\nimport SortableTreeFullDragTheme from 'react-sortable-tree-theme-full-node-drag';\nimport 'react-sortable-tree/style.css'; // This only needs to be imported once in your app\n\nlet id_count = 0;\n\nfunction getNodeKey({ node, treeIndex }) {\n    // return node.title + '_' + treeIndex.toString();\n    return node.id;\n}\n\nfunction makeNode(title, prob, temporary = false) {\n    return {\n        title,\n        temporary,\n        prob,\n        subtitle: (e) => 'Frequency: ' + e.node.prob.toPrecision(2) + '; Code: ' + e.node.code,\n        id: id_count++,\n        code: '_',\n    };\n}\n\nexport default function HuffmanTree([msg]) {\n    const [treeData, setTreeData] = useState(() => {\n        let freq = {};\n        for (let ch of Array.from(msg)) {\n            freq[ch] = freq[ch] ? freq[ch] + 1 : 1;\n        }\n\n        return Object.entries(freq).map(([char, frequency]) =>\n            makeNode(char, frequency / msg.length)\n        );\n        // return [ makeNode('A', 0.3),  makeNode('B', 0.3),  makeNode('C', 0.1),  makeNode('D', 0.2),  makeNode('E', 0.1), ]\n    });\n\n    const canDrop = (params) => {\n        const { nextParent } = params;\n\n        return !(nextParent && (!nextParent.temporary || nextParent.children.length > 2));\n    };\n\n    const onMoveNode = (params) => {\n        const { treeData, nextParentNode, prevPath } = params;\n\n        if (prevPath.length >= 2) {\n            let p = prevPath[prevPath.length - 2];\n            let n = null;\n            walk({\n                treeData,\n                getNodeKey,\n                ignoreCollapsed: false,\n                callback: ({ node }) => {\n                    if (node.id === p) n = node;\n                },\n            });\n            if (n != null) {\n                n.prob = n.children.reduce((acc, curr) => acc + curr.prob, 0);\n                n.title =\n                    '{ ' + n.children.reduce((acc, curr) => acc + curr.title + ' ', ' ') + ' }';\n            }\n        }\n\n        if (!nextParentNode || !nextParentNode.temporary) return;\n        nextParentNode.prob = nextParentNode.children.reduce((acc, curr) => acc + curr.prob, 0);\n        nextParentNode.title = `{${nextParentNode.children.reduce(\n            (acc, curr) => acc + curr.title + '',\n            ''\n        )}}`;\n\n        const mywalk = (node, code) => {\n            node.code = code;\n            if (node.children && node.children.length >= 1) {\n                mywalk(node.children[0], code + '0');\n                if (node.children.length >= 2) {\n                    mywalk(node.children[1], code + '1');\n                }\n            }\n        };\n\n        for (let i = 0; i < treeData.length; ++i) mywalk(treeData[i], '');\n    };\n\n    const onClick = (e) => {\n        setTreeData((prevTree) => {\n            let next = [...prevTree];\n            next.push(makeNode('TMP', 0.0, true));\n            return next;\n        });\n    };\n\n    return (\n        <div\n            className={'nes-container is-rounded with-title'}\n            style={{ height: '600px', marginTop: 20, paddingBottom: 100 }}\n        >\n            <p className={'title'}>Редактор деревьев</p>\n            <button className={'nes-btn'} style={{ margin: '20px' }} onClick={onClick}>\n                Добавить узел-связку\n            </button>\n            <SortableTree\n                treeData={treeData}\n                onChange={(treeData) => setTreeData(treeData)}\n                onMoveNode={onMoveNode}\n                canDrop={canDrop}\n                getNodeKey={getNodeKey}\n                theme={SortableTreeFullDragTheme}\n            />\n        </div>\n    );\n}\n","import React from 'react';\nimport './Question.css';\nimport ConvertDecimalTable from './ConvertDecimalTable';\nimport { formatTable } from './EncodingTable';\nimport { ExpressionEvaluator } from './ExpressionEvaluator';\nimport HuffmanTree from \"./HuffmanTree\";\n\nexport const AnswerStatus = Object.freeze({\n    WRONG: 1,\n    NONE: 2,\n    RIGHT: 3,\n});\n\nexport default function Question({ onchange, value, keyId, status, answer, task }) {\n    const className = 'nes-input ' + (status === AnswerStatus.RIGHT ? 'is-success' : '');\n\n    const questionText = task.taskDescription.text;\n    return (\n        <div className='testCard'>\n            <div className='questionText'>\n                {questionText.split('\\n').map((q, i) => (\n                    <div key={i}> {q} </div>\n                ))}\n                {answer && <div>- Правильный ответ: {answer}</div>}\n            </div>\n\n            {task.taskClass.uses_table && formatTable(task.taskDescription.params)}\n            {task.taskClass.uses_calculator && ExpressionEvaluator()}\n            {task.taskClass.uses_convert_table && ConvertDecimalTable(false, task.taskDescription.params)}\n            {task.taskClass.uses_float_convert_table && ConvertDecimalTable(true, task.taskDescription.params)}\n            {task.taskClass.uses_huffman_tree && HuffmanTree(task.taskDescription.params)}\n\n            <div className='inputField'>\n                <label htmlFor='answerField'> Введите ответ: </label>\n                <input\n                    name={'answerField'}\n                    id={keyId}\n                    value={value}\n                    onChange={onchange}\n                    className={className}\n                />\n                <i className=\"my-nes-kirby nes-kirby \"/>\n            </div>\n        </div>\n    );\n}\n","import React from 'react';\n\nexport function formatTable([_, table]) {\n    return (\n        <div style={{ margin: '10px' }}>\n            <table\n                className='nes-table is-bordered is-centered with-title'\n                style={{ margin: 'auto' }}\n            >\n                <thead>\n                    <tr>\n                        <td> Символ</td>\n                        {Object.entries(table.from_table).map(([k, v], i) => {\n                            return <td key={i}> {v} </td>;\n                        })}\n                    </tr>\n                </thead>\n                <tbody>\n                    <tr>\n                        <td> Подстановка</td>\n                        {Object.entries(table.from_table).map(([k, v], i) => {\n                            return <td key={i}> {k} </td>;\n                        })}\n                    </tr>\n                </tbody>\n            </table>\n        </div>\n    );\n}","import React, { useState } from 'react';\nimport Question, { AnswerStatus } from '../Question/Question';\nimport './TestBlock.css';\nimport { powerOfTwo, randBool, randInt } from '../../Tasks/utilities';\n\nclass RandRange {\n    constructor(a, b, callback) {\n        this.a = a;\n        this.b = b;\n        this.callback = callback;\n    }\n\n    getNum() {\n        let num = Math.random() * (this.b - this.a) + this.a;\n        return this.callback(num);\n    }\n}\n\nfunction questinator(getParams) {\n    return (strings, ...paramNums) => {\n        return () => {\n            let [params, answer] = getParams();\n\n            let finalString = [];\n            for (let i = 0; i < strings.length; i++) {\n                finalString.push(strings[i]);\n                if (paramNums[i] !== undefined) {\n                    finalString.push(params[paramNums[i]].toString());\n                }\n            }\n            return {\n                answer: answer,\n                text: finalString.join(''),\n            };\n        };\n    };\n}\n\nconst infQuestions = [\n    questinator(() => {\n        let num = new RandRange(1, 11, (n) => n | 0).getNum();\n        return [[num], Math.pow(2, num)];\n    })`Из скольких букв состоит равновероятный алфавит, если одна буква этого алфавита несет ${0} бита информации?`,\n\n    questinator(() => {\n        let a = new RandRange(4, 8, (n) => Math.pow(2, n | 0)).getNum();\n        let b = new RandRange(3, 7, (n) => Math.log2(a | 0) * (n | 0)).getNum();\n\n        let ans = b / Math.log2(a | 0);\n        return [[a, b], ans];\n    })`Сообщение составлено из символов равновероятного алфавита. Чему равно количество символов в этом сообщении, если известно, что алфавит состоит из ${0} символов, а сообщение несет ${1} бита информации`,\n\n    questinator(() => {\n        let a = new RandRange(2, 12, powerOfTwo).getNum();\n        let b = new RandRange(2, 12, powerOfTwo).getNum();\n        let c = new RandRange(1, 6, powerOfTwo).getNum();\n\n        let ans = a * b * Math.log2(c);\n        return [[a, b, c], ans];\n    })`Какое количество информации заключается в черно-белом изображении на телеэкране, если экран содержит ${0} линий, каждая линия – ${1} экранных точек, а каждая точка имеет ${2} градаций яркости?`,\n\n    questinator(() => {\n        let a = new RandRange(2, 100, (n) => n | 0).getNum();\n        let b = new RandRange(1, 6, powerOfTwo).getNum();\n        let ans = a * Math.log2(b);\n        return [[a, b], ans];\n    })`Определить максимальную энтропию системы, состоящей из ${0} элементов, каждый из которых может находиться в одном из ${1}-х состояний.`,\n];\nconst encodingQuestions = [\n    questinator(() => {\n        let a = new RandRange(5, 70, (n) => n | 0).getNum();\n        let b = new RandRange(7, 20, (n) => n | 0).getNum();\n        let amountInfo = Math.floor(Math.log2(a) * b * 100) / 100;\n        let volumeInfo = Math.ceil(Math.log2(a)) * b;\n        return [[a, b], [amountInfo, volumeInfo].join(';')];\n    })`Составить равномерный двоичный код для передачи сообщений некоторого ${0}-буквенного алфавита. Чему равны количество и объем информации при передачи ${1}-буквенного слова этого алфавита, если все его символы равновероятны? Округлить до сотых.`,\n\n    questinator(() => {\n        let a = new RandRange(8, 88, (n) => n | 0).getNum();\n        let ternary = Math.ceil(Math.log2(a) / Math.log2(3));\n        let binary = Math.ceil(Math.log2(a));\n        return [[a], [ternary, binary].join(';')];\n    })`Определить минимальную разрядность равномерного троичного кода для кодирования алфавита из ${0} букв. Как изменится результат, если код будет двоичным?`,\n\n    questinator(() => {\n        let letterSubs = [\n            ['A', 'H'],\n            ['B', 'G'],\n            ['C', 'F'],\n            ['D', 'E'],\n            ['E', 'D'],\n            ['F', 'C'],\n            ['G', 'B'],\n            ['H', 'A'],\n        ];\n\n        let a = '';\n        let ans = '';\n        for (let i = 0; i < 5; i++) {\n            let index = (Math.random() * letterSubs.length) | 0;\n            a += letterSubs[index][0];\n            ans += letterSubs[index][1];\n        }\n\n        return [[a], ans];\n    })`Закодировать сообщение ${0} с помощью шифров простой замены: \\n A B C D E F G H \\n H G F E D C B A`,\n];\nconst radixQuestions = [\n    questinator(() => {\n        let example = '101.111';\n        let lLen = randInt(2, 5);\n        let rLen = randInt(2, 5);\n\n        let ans = 0;\n        let lString = '';\n        for (let i = 0; i < lLen; i++) {\n            let b = randBool();\n            if (b || i === 0) {\n                lString += '1';\n                ans += Math.pow(2, lLen - i - 1);\n            } else {\n                lString += '0';\n            }\n        }\n\n        let rString = '';\n        for (let i = 0; i < rLen; i++) {\n            let b = randBool();\n            if (b) {\n                rString += '1';\n                ans += Math.pow(2, -i - 1);\n            } else {\n                rString += '0';\n            }\n        }\n\n        return [[lString + '.' + rString], ans];\n    })`Перевести число ${0} из двоичной в десятичную систему счисления`,\n\n    questinator(() => {\n        let example = '101.111';\n        let lLen = randInt(2, 5);\n        let rLen = randInt(2, 5);\n\n        let ans = 0;\n        let lString = '';\n        for (let i = 0; i < lLen; i++) {\n            let b = randBool();\n            if (b || i === 0) {\n                lString += '1';\n                ans += Math.pow(2, lLen - i - 1);\n            } else {\n                lString += '0';\n            }\n        }\n\n        let rString = '';\n        for (let i = 0; i < rLen; i++) {\n            let b = randBool();\n            if (b) {\n                rString += '1';\n                ans += Math.pow(2, -i - 1);\n            } else {\n                rString += '0';\n            }\n        }\n\n        return [[ans], lString + '.' + rString];\n    })`Перевести число ${0} из десятичной в двоичную систему счисления`,\n\n    questinator(() => {\n        let lLen = randInt(2, 5);\n        let rLen = randInt(2, 5);\n\n        let ans = 0;\n        let lString = '';\n        for (let i = 0; i < lLen; i++) {\n            let b = randBool();\n            if (b || i === 0) {\n                lString += '1';\n                ans += Math.pow(2, lLen - i - 1);\n            } else {\n                lString += '0';\n            }\n        }\n\n        let rString = '';\n        for (let i = 0; i < rLen; i++) {\n            let b = randBool();\n            if (b) {\n                rString += '1';\n                ans += Math.pow(2, -i - 1);\n            } else {\n                rString += '0';\n            }\n        }\n        let a = lString + '.' + rString;\n\n        lString = '';\n        for (let i = 0; i < lLen; i++) {\n            let b = randBool();\n            if (b || i === 0) {\n                lString += '1';\n                ans += Math.pow(2, lLen - i - 1);\n            } else {\n                lString += '0';\n            }\n        }\n\n        rString = '';\n        for (let i = 0; i < rLen; i++) {\n            let b = randBool();\n            if (b) {\n                rString += '1';\n                ans += Math.pow(2, -i - 1);\n            } else {\n                rString += '0';\n            }\n        }\n        let b = lString + '.' + rString;\n\n        return [[a, b], ans];\n    })`Сложить числа ${0} и ${1} в двоичной СС в столбик и перевести результат в десятичную систему счисления`,\n];\nconst machineArithm = [\n    questinator(() => {\n        let lLen = randInt(2, 5);\n        let rLen = randInt(2, 5);\n\n        let ans = 0;\n        let lString = '';\n        for (let i = 0; i < lLen; i++) {\n            let b = randBool();\n            if (b || i === 0) {\n                lString += '1';\n                ans += Math.pow(2, lLen - i - 1);\n            } else {\n                lString += '0';\n            }\n        }\n\n        let rString = '';\n        for (let i = 0; i < rLen; i++) {\n            let b = randBool();\n            if (b) {\n                rString += '1';\n                ans += Math.pow(2, -i - 1);\n            } else {\n                rString += '0';\n            }\n        }\n\n        let defaultNum = lString + '.' + rString;\n        let reverseCode = defaultNum\n            .split('')\n            .map((ch) => (ch === '1' ? '0' : ch === '0' ? '1' : ch))\n            .join('');\n        let complementCode = '';\n        let firstZeroAtIndex = reverseCode\n            .split('')\n            .reverse()\n            .findIndex((e) => e === '0');\n\n        let fstZero = reverseCode.length - firstZeroAtIndex - 1;\n        if (firstZeroAtIndex < 0) {\n            complementCode = '1' + reverseCode;\n        } else {\n            for (let i = 0; i < reverseCode.length; i++) {\n                if (reverseCode[i] === '.') complementCode += reverseCode[i];\n                else if (i < fstZero) complementCode += reverseCode[i];\n                else if (i === fstZero) complementCode += '1';\n                else complementCode += '0';\n            }\n        }\n\n        return [\n            [defaultNum],\n            [defaultNum, reverseCode, complementCode].join(';'),\n        ];\n    })`Записать прямой, дополнительный и обратный код для двоичного числа ${0}. В качестве разделителя использовать точку с запятой`,\n];\n\n\n\n\nexport default function TestBlock({ tasks, answers }) {\n    const onAnswerEnter = (i, event) => {\n        tasks[i].taskUpdateAnswer(event.target.value);\n    };\n\n\n    let tests = tasks.map((task, i) => (\n        <li className={'nes-container is-rounded'} key={i}>\n            <div style={{ display: \"inherit\", width: \"inherit\", top: -15 }} className=\"nes-badge is-splited\">\n                <span style={{width: \"10%\"}} className=\"is-success\">{i+1}</span>\n                <span style={{width: \"90%\"}} className=\"is-dark\">{tasks[i].taskClass.taskName}</span>\n            </div>\n            <Question\n                value={task.userAnswer}\n                keyId={i}\n                task={tasks[i]}\n                questionText={tasks[i].taskDescription.text}\n                onchange={(event) => onAnswerEnter(i, event)}\n                status={answers[i][1] ? AnswerStatus.RIGHT : AnswerStatus.NONE}\n            />\n        </li>\n    ));\n\n    let correctAnswers = answers.filter((a) => a[1]).length;\n    return (\n        <div className='App'>\n            <ul> {tests} </ul>\n            <div>\n                {correctAnswers} из {answers.length} правильно\n            </div>\n\n            {correctAnswers === answers.length && (\n                <section className='icon-list'>\n                    <i className='nes-octocat animate'/>\n                </section>\n            )}\n        </div>\n    );\n}\n","import { randInt, Table } from './utilities';\n\nexport class Task6 {\n    static taskName = 'Равномерный двоичный код для передачи сообщения';\n    static paramsLength = 2;\n\n    static solve([a, b]) {\n        let amountInfo = Math.floor(Math.log2(a) * b * 100) / 100;\n        let volumeInfo = Math.ceil(Math.log2(a)) * b;\n        return `${amountInfo};${volumeInfo}`;\n    }\n\n    static generate_task() {\n        let a = randInt(5, 70);\n        let b = randInt(7, 20);\n        let params = [a, b];\n        return { params, text: this.getText(params) };\n    }\n\n    static getText(params) {\n        for (let i = 0; i < this.paramsLength; ++i)\n            params[i] = params[i] ?? String.fromCharCode('A'.charCodeAt(0) + i);\n        return `Составить равномерный двоичный код для передачи сообщений некоторого ${params[0]}-буквенного алфавита. Чему равны количество и объем информации при передачи ${params[1]}-буквенного слова этого алфавита, если все его символы равновероятны? Округлить до сотых.`;\n    }\n}\n\nexport class Task7 {\n    static taskName = 'Минимальная разрядность равномерного троичного кода';\n    static paramsLength = 1;\n\n    static solve([a]) {\n        let ternary = Math.ceil(Math.log2(a) / Math.log2(3));\n        let binary = Math.ceil(Math.log2(a));\n        return `${ternary};${binary}`;\n    }\n\n    static generate_task() {\n        let a = randInt(8, 88);\n        let params = [a];\n        return { params, text: this.getText(params) };\n    }\n\n    static getText(params) {\n        for (let i = 0; i < this.paramsLength; ++i)\n            params[i] = params[i] ?? String.fromCharCode('A'.charCodeAt(0) + i);\n        return `Определить минимальную разрядность равномерного троичного кода для кодирования алфавита из ${params[0]} букв. Как изменится результат, если код будет двоичным?`;\n    }\n}\n\nexport class SimpleCipherEncode {\n    static taskName = 'Кодирование с помощью простой замены';\n    static paramsLength = 2;\n    static uses_table = true;\n\n    static solve([msg, table]) {\n        return Array.from(msg)\n            .map((ch) => table.decode(ch))\n            .join('');\n    }\n\n    static generate_task() {\n        let msgLength = 5;\n        let alphabetSize = msgLength;\n        let table = new Table(alphabetSize);\n\n        let msg = new Array(msgLength)\n            .fill(0)\n            .map((_) =>\n                randInt(0, alphabetSize, (num) => String.fromCharCode('A'.charCodeAt(0) + num))\n            )\n            .map((ch) => table.encode(ch))\n            .join('');\n\n        let params = [msg, table];\n        return { params, text: this.getText(params) };\n    }\n\n    static getText(params) {\n        for (let i = 0; i < this.paramsLength; ++i)\n            params[i] = params[i] ?? String.fromCharCode('A'.charCodeAt(0) + i);\n        return `Закодировать сообщение ${params[0]} с помощью шифров простой замены`;\n    }\n}\n\nexport class HuffmanEncoding {\n    static taskName = 'Кодирование методом Хаффмана';\n    static paramsLength = 2;\n    static uses_huffman_tree = true;\n\n    static solve([msg]) {\n        class NodeTree {\n            constructor(left, right) {\n                this.left = left;\n                this.right = right;\n            }\n\n            children = () => [this.left, this.right];\n            nodes = () => this.children();\n            toStr = () => `${this.left}_${this.right}`;\n        }\n\n        const huffman_code_tree = (node, left = true, binString = '') => {\n            if (typeof node === 'string') {\n                return { [node]: binString };\n            }\n            const [l, r] = node.children();\n            return {\n                ...huffman_code_tree(l, true, binString + '0'),\n                ...huffman_code_tree(r, false, binString + '1'),\n            };\n        };\n\n        let freq = {};\n        for (let ch of Array.from(msg)) {\n            freq[ch] = freq[ch] ? freq[ch] + 1 : 1;\n        }\n\n        let nodes = Object.entries(freq)\n            .map(([k, v]) => [k, v])\n            .sort(([k1, v1], [k2, v2]) => v2 - v1);\n\n        while (nodes.length > 1) {\n            const [key1, c1] = nodes[nodes.length - 1];\n            const [key2, c2] = nodes[nodes.length - 2];\n            nodes = nodes.slice(0, -2);\n            const node = new NodeTree(key1, key2);\n            nodes.push([node, c1 + c2]);\n            nodes = nodes.sort(([k1, v1], [k2, v2]) => v2 - v1);\n        }\n\n        const huffmanCode = huffman_code_tree(nodes[0][0]);\n        let answer = Array.from(msg)\n            .map((ch) => huffmanCode[ch])\n            .join('');\n        // console.log(msg, huffmanCode, freq, answer);\n\n        return answer;\n    }\n\n    static check_solution(params, userAnswer) {\n        return this.solve(params).length === userAnswer.length;\n    }\n\n    static generate_task() {\n        let msgLength = 10;\n        let alphabetSize = randInt(5, 8);\n        let msg = Array(msgLength)\n            .fill(0)\n            .map((ch) =>\n                randInt(0, alphabetSize, (num) => String.fromCharCode('A'.charCodeAt(0) + num))\n            )\n            .join('');\n\n        this.solve([msg]);\n\n        let params = [msg];\n        return { params, text: this.getText(params) };\n    }\n\n    static getText(params) {\n        for (let i = 0; i < this.paramsLength; ++i)\n            params[i] = params[i] ?? String.fromCharCode('A'.charCodeAt(0) + i);\n        return `Построить двоичный код Хаффмана для алфавита использующегося в сообщении ${params[0]} и переписать это сообщение используя полученный код`;\n    }\n}\n","import { powerOfTwo, randDouble, randInt } from './utilities';\n\n\nexport class SizeOfAlphabet {\n    static taskName = \"Размер алфавита\"\n    static paramsLength = 1;\n    static uses_calculator = true;\n\n    static solve([bitsInOneLetter]) {\n        return Math.pow(2, bitsInOneLetter);\n    }\n\n    static generate_task() {\n        let bitsInOneLetter = randInt(1, 11);\n        let params = [bitsInOneLetter];\n        return { params, text: this.getText(params) };\n    }\n\n    static getText(params) {\n        for (let i = 0; i < this.paramsLength; ++i)\n            params[i] = params[i] ?? String.fromCharCode('A'.charCodeAt(0) + i);\n        return `Из скольких букв состоит равновероятный алфавит, если одна буква этого алфавита несет ${params[0]} бит(а) информации?`;\n    }\n}\n\nexport class LengthOfMSG {\n    static taskName = \"Длина сообщения\"\n    static paramsLength = 2;\n    static uses_calculator = true;\n\n    static solve([a, b]) {\n        return b / Math.log2(a | 0);\n    }\n\n    static generate_task() {\n        let a = randDouble(4, 8, (n) => Math.pow(2, n | 0));\n        let b = randDouble(3, 7, (n) => Math.log2(a | 0) * (n | 0));\n        let params = [a, b];\n        return { params, text: this.getText(params) };\n    }\n\n    static getText(params) {\n        for (let i = 0; i < this.paramsLength; ++i)\n            params[i] = params[i] ?? String.fromCharCode('A'.charCodeAt(0) + i);\n        return `Сообщение составлено из символов равновероятного алфавита. Чему равно количество символов в этом сообщении, если известно, что алфавит состоит из ${params[0]} символов, а сообщение несет ${params[1]} бита информации`;\n    }\n}\n\nexport class Task3 {\n    static taskName = \"Кол-во информации на экране\"\n    static paramsLength = 3;\n    static uses_calculator = true;\n\n    static solve([a, b, c]) {\n        return a * b * Math.log2(c);\n    }\n\n    static generate_task() {\n        let a = randInt(2, 12, powerOfTwo);\n        let b = randInt(2, 12, powerOfTwo);\n        let c = randInt(1, 6, powerOfTwo);\n\n        let params = [a, b, c];\n        return { params, text: this.getText(params) };\n    }\n\n    static getText(params) {\n        for (let i = 0; i < this.paramsLength; ++i)\n            params[i] = params[i] ?? String.fromCharCode('A'.charCodeAt(0) + i);\n        return `Какое количество информации заключается в черно-белом изображении на телеэкране, если экран содержит ${params[0]} линий, каждая линия – ${params[1]} экранных точек, а каждая точка имеет ${params[2]} градаций яркости?`;\n    }\n}\n\nexport class Task4 {\n    static taskName = \"Максимальная энтропия системы\"\n    static paramsLength = 2;\n    static uses_calculator = true;\n\n    static solve([a, b]) {\n        return a * Math.log2(b);\n    }\n\n    static generate_task() {\n        let a = randInt(2, 100, (n) => n | 0);\n        let b = randInt(1, 6, powerOfTwo);\n        let params = [a, b];\n        return { params, text: this.getText(params) };\n    }\n\n    static getText(params) {\n        for (let i = 0; i < this.paramsLength; ++i)\n            params[i] = params[i] ?? String.fromCharCode('A'.charCodeAt(0) + i);\n        return `Определить максимальную энтропию системы, состоящей из ${params[0]} элементов, каждый из которых может находиться в одном из ${params[1]}-х состояний.`;\n    }\n}\n\nexport class Task5 {\n    static taskName = \"Энтропия алфавита\"\n    static paramsLength = 2;\n    static uses_calculator = true;\n\n    static solve([msg]) {\n        let letters = {};\n        for (let ch of Array.from(msg)) {\n            letters[ch] = letters[ch] ? letters[ch]+1 : 1;\n        }\n        let probs = {};\n        for (let [char, n] of Object.entries(letters)) {\n            probs[char] = n / msg.length;\n        }\n        let sum = 0;\n        for (let [char, prob] of Object.entries(probs)) {\n            sum += prob * Math.log2(prob)\n        }\n\n        return -sum;\n    }\n\n    static generate_task() {\n        let msgLength = 10;\n        let alphabetSize = randInt(2, 4);\n        let msg = Array(msgLength)\n            .fill(0)\n            .map((ch) =>\n                randInt(0, alphabetSize, (num) =>\n                    String.fromCharCode('a'.charCodeAt(0) + num)\n                )\n            ).join('');\n\n        let params = [msg];\n        return { params, text: this.getText(params) };\n    }\n\n    static getText(params) {\n        for (let i = 0; i < this.paramsLength; ++i)\n            params[i] = params[i] ?? String.fromCharCode('A'.charCodeAt(0) + i);\n        return `Найти энтропию алфавита, задействованного в сообщении: \"${params[0]}\"`;\n    }\n}\n","import { convertRadix, digitToChar, randBool, randInt, Table } from './utilities';\n\nexport class ConvertDecimalToN {\n    static taskName = 'Конвертация из десятичной СС';\n    static paramsLength = 2;\n    static uses_calculator = true;\n    static uses_convert_table = true;\n\n    static solve([number, base]) {\n        let remainderParts = [];\n        let intParts = [];\n        let n = number;\n        while (n > 0) {\n            remainderParts.push(n % base);\n            intParts.push(n);\n            n = (n / base) | 0;\n        }\n        return [\n            remainderParts\n                .map((a) => digitToChar(a))\n                .reverse()\n                .join(''),\n            intParts,\n            remainderParts,\n        ];\n    }\n\n    static generate_task() {\n        let number = randInt(1, 1024);\n        let base = randInt(2, 17, (a) => (a === 10 ? 11 : a));\n        let params = [number, base];\n        return { params, text: this.getText(params) };\n    }\n\n    static getText(params) {\n        for (let i = 0; i < this.paramsLength; ++i)\n            params[i] = params[i] ?? String.fromCharCode('A'.charCodeAt(0) + i);\n        return `Перевести число ${params[0]} из десятичной системы в СС с основанием ${params[1]}.`;\n    }\n}\n\nexport class ConvertNtoDecimal {\n    static taskName = 'Конвертация в десятичную СС';\n    static paramsLength = 2;\n    static uses_calculator = true;\n\n    static solve([number, base]) {\n        return convertRadix(number, base, 10);\n    }\n\n    static generate_task() {\n        let base = randInt(2, 17, (a) => (a === 10 ? 11 : a));\n        let number = convertRadix(randInt(1, 1024), 10, base);\n        let params = [number, base];\n        return { params, text: this.getText(params) };\n    }\n\n    static getText(params) {\n        for (let i = 0; i < this.paramsLength; ++i)\n            params[i] = params[i] ?? String.fromCharCode('A'.charCodeAt(0) + i);\n        return `Перевести число ${params[0]} из системы счисления с основанием ${params[1]} в десятичную.`;\n    }\n}\n\nexport class ConvertDecimalFloatToN {\n    static taskName = 'Конвертация дроби из десятичной СС в двоичную';\n    static paramsLength = 2;\n    static uses_float_convert_table = true;\n    static uses_calculator = true;\n\n    static solve([number, base]) {\n        let answer = '';\n        let num = number;\n        while (num !== 0) {\n            num *= base;\n            if (num < 1) {\n                answer += '0'\n            } else {\n                num -= (num|0);\n                answer += 1;\n            }\n        }\n        // console.log(answer);\n        return answer;\n    }\n\n    static check_solution(params, userAnswer) {\n        return this.solve(params).toString() === userAnswer.toString().replace('0.', '');\n    }\n\n    static generate_task() {\n        let length = randInt(1, 5);\n        let base = 2; //randInt(2, 16, (a) => (a === 10 ? 16 : a));\n\n        let ans = 0;\n        while (ans === 0) {\n            for (let i = 0; i < length; i++) {\n                ans += randBool() ? Math.pow(base, -i - 1) : 0;\n            }\n        }\n        let params = [ans, base];\n        return { params, text: this.getText(params) };\n    }\n\n    static getText(params) {\n        for (let i = 0; i < this.paramsLength; ++i)\n            params[i] = params[i] ?? String.fromCharCode('A'.charCodeAt(0) + i);\n        return `Перевести число с плавающей запятой ${params[0]} из десятичной системы в СС с основанием ${params[1]}.`;\n    }\n}\n","import * as encodingTasks from './basic_encoding';\nimport * as informationTasks from './information_measurement';\nimport * as radixTasks from './positional_radix';\nimport { isClass } from './utilities';\n\nexport default function getAllTasks() {\n    const allTasks = [informationTasks, encodingTasks, radixTasks].flatMap((t, i) =>\n        Object.entries(t)\n            // .filter(([k, v]) => isClass(v))\n            .map(([k, v]) => v)\n    );\n    return allTasks;\n}\n","import React, { useState } from 'react';\nimport TestBlock from '../TestBlock/TestBlock';\nimport './App.css';\n\nimport getAllTasks from \"../../Tasks/allTasks\";\nimport {ConvertDecimalFloatToN, ConvertDecimalToN} from \"../../Tasks/positional_radix\";\nimport {HuffmanEncoding} from \"../../Tasks/basic_encoding\";\n\nlet allTasks = getAllTasks();\n\nlet initialTasks = [];\ninitInitialTasks(initialTasks)\n\nfunction initInitialTasks(initialTasks) {\n    let url = new URL(window.location.href);\n    let topics = {};\n    for (let [k, v] of url.searchParams) {\n        if (v === '') continue;\n        let name = k.replaceAll('_', ' ');\n        topics[name] = parseInt(v);\n    }\n    for (let t of allTasks) {\n        if (t.taskName in topics) {\n            for (let i = 0; i < topics[t.taskName]; ++i) {\n                initialTasks.push(t);\n            }\n        }\n    }\n\n    if (initialTasks.length === 0) {\n        initialTasks.push(...allTasks);\n        // initialTasks.push(ConvertDecimalToN);\n        // initialTasks.push(HuffmanEncoding);\n        // initialTasks.push(ConvertDecimalFloatToN);\n    }\n}\n\nconst createInitialTasks = (setTaskAnswers) => initialTasks.map((task, index) => {\n    let taskDescription = task.generate_task();\n\n    return {\n        taskClass: task,\n        taskDescription,\n        taskUpdateAnswer: (userAnswer) => {\n            setTaskAnswers((prevTaskAnswers) => {\n                let newTaskAnswers = prevTaskAnswers.map((p) => [...p]);\n                let isCorrect;\n                if (task.hasOwnProperty('check_solution')) {\n                    isCorrect = task.check_solution(taskDescription.params, userAnswer.toString());\n                } else {\n                    let correctAnswer = task.solve(taskDescription.params);\n                    if (Array.isArray(correctAnswer))\n                        correctAnswer = correctAnswer[0];\n                    isCorrect = correctAnswer.toString() === userAnswer.toString();\n                }\n\n                newTaskAnswers[index] = [userAnswer, isCorrect];\n                return newTaskAnswers;\n            });\n        },\n    };\n});\n\nfunction App() {\n    const [taskAnswers, setTaskAnswers] = useState(new Array(initialTasks.length).fill(0).fill([0, false]));\n    const [tasks, setTasks] = useState(_ => createInitialTasks(setTaskAnswers));\n\n    return (\n        <div className={'root'}>\n            <div className='TestBlock'>\n                <TestBlock tasks={tasks} answers={taskAnswers} />\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","import React, { useState } from 'react';\nimport './Settings.css'\n\nimport getAllTasks from '../../Tasks/allTasks';\n\n// console.log(Object.keys(allTasks))\n\nlet allTasks = getAllTasks();\nlet initialTasks = [...allTasks];\n\nfunction ThemeChooser({ name, id, setChecked }) {\n    let [numberEnabled, setNumberEnabled] = useState(false);\n    let [text, setText] = useState('0');\n\n    const onChange = (e) => {\n        setText(numberEnabled ? '0' : '1');\n        setNumberEnabled(!numberEnabled);\n\n        setChecked((prevState) => {\n            let newState = prevState.map((a) => ({ ...a }));\n            newState[id].number = numberEnabled ? '0' : '1';\n            return newState;\n        });\n    };\n\n    const onTextEnter = (e) => {\n        setText(e.target.value);\n\n        let val = e.target.value;\n        setChecked((prevState) => {\n            let newState = prevState.map((a) => ({ ...a }));\n            newState[id].number = numberEnabled ? val : '0';\n            return newState;\n        });\n    };\n\n    return (\n        <div>\n            <label>\n                <input\n                    size={3}\n                    type='number'\n                    value={text}\n                    disabled={!numberEnabled}\n                    min={0}\n                    pattern={/[\\d]*/}\n                    onChange={onTextEnter}\n                    className={'nes-input'}\n                    style={{ borderImageOutset: 0, margin: 1 }}\n                />\n            </label>\n            <label>\n                <input\n                    id={'check' + id}\n                    type='checkbox'\n                    onChange={onChange}\n                    className={'nes-checkbox'}\n                />\n                <span>{name}</span>\n            </label>\n        </div>\n    );\n}\n\nfunction formatLink(pairs) {\n    let mainLink = `${window.location.origin}/test`;\n\n    let params = pairs\n        .filter((check) => check.number > 0)\n        .map((check) => `${check.name.replaceAll(' ', '_')}=${check.number}`)\n        .join('&');\n    if (params.length > 0) {\n        mainLink += '?' + params;\n    }\n    return mainLink;\n}\n\nexport default function Settings() {\n    // const задачи = [\n    //     'Измерение информации',\n    //     'Основы кодирования',\n    //     'Системы счисления',\n    //     'Основы машинной арифметики',\n    // ];\n\n    const задачи = initialTasks.map((a) => a.taskName ?? a.name);\n    let checkedInit = задачи.map((name) => ({\n        name,\n        number: 0,\n    }));\n    const [checked, setChecked] = useState(checkedInit);\n\n    return (\n        <div style={{marginTop: 10}} className={'nes-container is-rounded with-title task-list'}>\n            <div className={'title'}>Выбери тему и кол-во заданий</div>\n\n            {задачи.map((name, index) => (\n                <ThemeChooser name={name} id={index} key={index} setChecked={setChecked} />\n            ))}\n            {checked.length !== 0 && (\n                <div className={'nes-text is-error'}>\n                    Ссылка:\n                    <a href={formatLink(checked)}>{formatLink(checked)}</a>\n                </div>\n            )}\n        </div>\n    );\n}\n","import App from './App/App';\nimport React from 'react';\nimport { BrowserRouter, Link, Route, Switch } from 'react-router-dom';\nimport Settings from './Settings/Settings';\nimport 'nes.css/css/nes.min.css';\n\nexport default function Main() {\n    return (\n        <div className={'root'}>\n            <BrowserRouter>\n                <div className=' nes-container with-title is-rounded'>\n                    <p className='title'>Выбор раздела</p>\n                    <Link style={{ marginRight: '-5px' }} className={'nes-btn'} to={'./test'}>\n                        Тестирование\n                    </Link>\n                    <Link className={'nes-btn'} to={'./settings'}>\n                        Настройки\n                    </Link>\n\n                    <div className='nes-badge' style={{ marginLeft: '100px', width: '400px' }}>\n                        <span className='is-success'>Тесты-тесты-тесты!</span>\n                        <i className='nes-icon is-large star'/>\n                    </div>\n                </div>\n\n                <Switch>\n                    <Route path={['/test']} component={App} />\n                    <Route path={['/settings', '/']} component={Settings} />\n                </Switch>\n            </BrowserRouter>\n        </div>\n    );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport Main from \"./components/Main\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Main />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n","import React, { useState } from 'react';\n\nexport function ExpressionEvaluator() {\n    const [inputNum, setInputNum] = useState('0');\n\n    let evaluationResult = '0';\n    try {\n        let input = inputNum.replaceAll('log2', 'Math.log2');\n        evaluationResult = eval(input);\n    } catch (e) {}\n    if (typeof evaluationResult === 'object' || evaluationResult === '' || evaluationResult === undefined) {\n        evaluationResult = '???';\n    }\n\n    return (\n        <div style={{ textAlign: 'left', fontSize: '0.9rem' }}>\n            Калькулятор:\n            <input\n                className={'nes-input'}\n                style={{ width: '19rem', borderImageOutset: 0 }}\n                value={inputNum}\n                onChange={(e) => setInputNum(e.target.value)}\n                // pattern={'^[0-9]*$'}\n            />\n            = <label> {evaluationResult} </label>\n        </div>\n    );\n}\n"],"sourceRoot":""}