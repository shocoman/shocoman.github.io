{"version":3,"sources":["Tasks/utilities.js","components/Question/ConvertDecimalTable.js","components/Question/HuffmanTree.js","components/Question/InfoPopup.js","components/Question/FloatRepresentation/InputBoxes/InputBox.js","components/Question/FloatRepresentation/InputBoxes/InputBoxesComponent.js","components/Question/FloatRepresentation/FloatRepresentation.js","components/Question/Question.js","components/Question/EncodingTable.js","components/TestBlock/TestBlock.js","Tasks/_ProtoTask.js","Tasks/basic_encoding.js","Tasks/information_measurement.js","Tasks/positional_radix.js","Tasks/_LoadAllTasks.js","components/App/App.js","components/Settings/Settings.js","components/Main.js","index.js","components/Question/ExpressionEvaluator.js"],"names":["randDouble","a","b","callback","Math","random","randInt","randBool","powerOfTwo","n","pow","shuffleArray","array","prev","repeats","i","length","j","floor","Table","size","letters","Array","fill","map","String","fromCharCode","charCodeAt","from_letters","to_letters","this","from_table","to_table","char","digitToChar","digit","convertRadix","num","fromRadix","toRadix","parseInt","toString","toUpperCase","UserAnswer","mainAnswer","value","correct","additionalProperties","_","cloneDeep","ConvertDecimalTable","floatConvert","params","convertible","radix","userAnswer","onChange","emptyRow","rows","table","setRows","getNewRows","answer","decodedNumber","filter","k","join","v","reverse","onRowChange","colNum","rowNum","e","isNaN","Number","target","prevRows","newRows","onRowKeyPressed","key","keyCode","slice","preventDefault","convertTable","className","style","captionSide","a_correct","b_correct","onKeyDown","textAlign","getNodeKey","node","treeIndex","id","id_count","makeNode","title","prob","temporary","subtitle","toPrecision","code","HuffmanTree","msg","treeData","tree","freq","from","ch","Object","entries","initTreeState","setTreeData","data","containerTitle","treeIsCorrect","color","height","marginTop","paddingBottom","margin","onClick","next","push","onMoveNode","nextParentNode","prevPath","p","walk","ignoreCollapsed","children","reduce","acc","curr","recursiveNaming","treeDataCopy","canDrop","nextParent","theme","SortableTreeFullDragTheme","InfoPopup","trigger","fontSize","position","on","closeOnDocumentClick","mouseLeaveDelay","mouseEnterDelay","width","InputBox","type","handleChange","handleKeyDown2","handleFocus","name","inputRef","inputProps","useState","setDigit","digitChange","val","d","onDigitIncrement","operation","onFocus","maxLength","ref","InputBoxesComponent","props","state","characterArray","amount","handleKeyDown","bind","inputElements","autoFocus","select","nextProps","inputRegExp","items","password","el","display","renderItems","setState","prevState","handleOutputString","previousElementSibling","focusPrevChar","setModuleOutput","focusNextChar","setTimeout","focus","nextElementSibling","character","number","placeholder","Component","defaultProps","FloatRepresentation","gridSize","undefined","float_grid","enteredNumberIsCorrect","selectedBitsAreCorrect","bitsCorrect","marks","selectedInput","setSelectedInput","padEnd","enteredNumber","setEnteredNumber","setSelectedBits","range","min","max","marginBottom","step","values","rounded_vals","selectedBits","freeze","WRONG","NONE","RIGHT","Question","onInputChange","keyId","task","onAdditionalComponentChange","taskDescription","text","taskClass","uses_float_grid","uses_table","formatTable","uses_calculator","ExpressionEvaluator","uses_convert_table","uses_float_convert_table","uses_huffman_tree","htmlFor","u","additionalInformation","RandRange","questinator","getParams","strings","paramNums","finalString","getNum","log2","ans","c","ceil","letterSubs","index","lLen","rLen","lString","rString","defaultNum","reverseCode","split","complementCode","firstZeroAtIndex","findIndex","fstZero","TestBlock","tasks","answers","tests","top","taskName","taskUpdateAnswer","onAnswerEnter","correctAnswers","ProtoTask","Error","getText","isCorrect","solve","Task6","amountInfo","volumeInfo","paramsLength","Task7","ternary","binary","SimpleCipherEncode","decode","encode","HuffmanEncoding","NodeTree","left","right","nodes","toStr","sort","v1","key1","c1","key2","c2","root","huffmanCode","huffman_code_tree","binString","l","r","collectNodes","depth","node_a","node_b","prob_a","prob_b","checkTree","decodeMessage","alphabetSize","SizeOfAlphabet","bitsInOneLetter","LengthOfMSG","Task3","Task4","Task5","probs","sum","ConvertDecimalToN","base","remainderParts","intParts","fst_col","snd_col","ConvertNtoDecimal","ConvertDecimalFloatToN","userAnswerString","replace","FloatRepresentationTask","numberString","Infinity","NaN","parseFloat","FloatToIEEE","f","buf","ArrayBuffer","Float32Array","Uint32Array","padStart","buffer","correctAnswer","console","log","mainAnswerIsCorrect","useSpecialCase","LoadAllTasks","informationTasks","encodingTasks","radixTasks","flatMap","t","allTasks","getAllTasks","initialTasks","url","URL","window","location","href","topics","searchParams","replaceAll","initInitialTasks","App","taskAnswers","setTaskAnswers","generateTask","prevTaskAnswers","checkAnswerAndReduce","createInitialTasks","ThemeChooser","setChecked","numberEnabled","setNumberEnabled","setText","disabled","pattern","newState","borderImageOutset","formatLink","pairs","mainLink","origin","check","Settings","задачи","checkedInit","checked","Main","marginRight","to","marginLeft","path","component","ReactDOM","render","StrictMode","document","getElementById","inputNum","setInputNum","evaluationResult","input","eval"],"mappings":"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","file":"static/js/main.526c9eb7.chunk.js","sourcesContent":["import _ from \"lodash\";\n\nexport function questinator(getParams) {\n    return (strings, ...paramNums) => {\n        return () => {\n            let [params, answer] = getParams();\n\n            let finalString = [];\n            for (let i = 0; i < strings.length; i++) {\n                finalString.push(strings[i]);\n                if (paramNums[i] !== undefined) {\n                    finalString.push(params[paramNums[i]].toString());\n                }\n            }\n            return {\n                answer: answer,\n                text: finalString.join(''),\n            };\n        };\n    };\n}\n\nexport function randDouble(a, b, callback = (a) => a) {\n    return callback(Math.random() * (b - a) + a);\n}\n\nexport function randInt(a, b, callback = (a) => a) {\n    return callback((Math.random() * (b - a) + a) | 0);\n}\n\nexport function randBool() {\n    return Math.random() > 0.5;\n}\n\nexport function powerOfTwo(n) {\n    return Math.pow(2, n | 0);\n}\n\nexport function shuffleArray(array) {\n    let prev = [...array];\n    let repeats = true;\n    while (repeats) {\n        repeats = false;\n        for (let i = array.length - 1; i > 0; i--) {\n            const j = Math.floor(Math.random() * (i + 1));\n            [array[i], array[j]] = [array[j], array[i]];\n        }\n\n        for (let i = 0; i < array.length; ++i) {\n            if (prev[i] === array[i]) {\n                repeats = true;\n            }\n        }\n    }\n}\n\nexport class Table {\n    constructor(size) {\n        let letters = new Array(size)\n            .fill(0)\n            .map((a, i) => String.fromCharCode('A'.charCodeAt(0) + i));\n        shuffleArray(letters);\n        let from_letters = [...letters];\n        shuffleArray(letters);\n        let to_letters = [...letters];\n\n        this.from_table = {};\n        this.to_table = {};\n        for (let i = 0; i < letters.length; ++i) {\n            this.from_table[from_letters[i]] = to_letters[i];\n            this.to_table[to_letters[i]] = from_letters[i];\n        }\n    }\n\n    encode(char) {\n        return this.from_table[char]\n    }\n\n    decode(char) {\n        return this.to_table[char]\n    }\n}\n\nexport function digitToChar(digit) {\n    if (digit < 10) {\n        return String.fromCharCode( '0'.charCodeAt(0) + digit );\n    } else if (digit < 36) {\n        return String.fromCharCode( 'A'.charCodeAt(0) + digit - 10 );\n    } else {\n        return '?';\n    }\n}\n\nexport function convertRadix(num, fromRadix, toRadix) {\n    return parseInt(num, fromRadix).toString(toRadix).toUpperCase();\n}\n\nexport function isClass(o) {\n    // doesn't work\n    return o.toString().startsWith('class');\n}\n\nexport class UserAnswer {\n    constructor() {\n        this.mainAnswer = {\n            value: 0,\n            correct: false,\n        };\n        this.additionalProperties = {}\n    }\n\n    clone() {\n        return _.cloneDeep(this);\n    }\n}","import React, { useState } from 'react';\nimport { digitToChar } from '../../Tasks/utilities';\nimport _ from 'lodash';\n\nexport default function ConvertDecimalTable({\n    floatConvert,\n    params: [convertible, radix],\n    userAnswer,\n    onChange,\n}) {\n    const emptyRow = [\n        { value: '', correct: false },\n        { value: '', correct: false },\n    ];\n    let rows = userAnswer.additionalProperties?.table ?? [emptyRow];\n\n    const setRows = (getNewRows) => {\n        let answer = _.cloneDeep(userAnswer);\n        answer.additionalProperties.table = getNewRows(rows);\n        onChange(answer);\n    };\n\n    let decodedNumber = '';\n    if (rows[0] && rows[0][1].value !== '') {\n        if (floatConvert)\n            decodedNumber =\n                '0.' +\n                rows\n                    .filter(([{ value: k }, _]) => k !== '')\n                    .map(([{ value: k }, _]) => digitToChar(parseInt(k)))\n                    .join('');\n        else\n            decodedNumber = rows\n                .filter(([_, { value: v }]) => v !== '')\n                .map(([_, { value: v }]) => digitToChar(parseInt(v)))\n                .reverse()\n                .join('');\n    }\n\n    const onRowChange = (colNum, rowNum, e) => {\n        if (isNaN(Number(e.target.value))) return;\n        let value = e.target.value;\n\n        setRows((prevRows) => {\n            // let newRows = prevRows.map((row) => [...row]);\n            let newRows = _.cloneDeep(prevRows);\n            newRows[rowNum][colNum].value = value;\n            return newRows;\n        });\n    };\n\n    const onRowKeyPressed = (rowNum, e) => {\n        if (rowNum === rows.length - 1) {\n            if (e.key === 'Enter') {\n                setRows((prevRows) => [..._.cloneDeep(prevRows), _.cloneDeep(emptyRow)]);\n            } else if (e.keyCode === 8 && rows.length > 1 && e.target.value === '') {\n                // backspace\n                setRows((prevRows) => _.cloneDeep(prevRows).slice(0, -1));\n                // prevRows.map((r) => [...r]).slice(0, -1));\n                e.preventDefault();\n            }\n        }\n    };\n\n    const convertTable = (\n        <table className='nes-table is-bordered is-centered'>\n            <caption style={{ captionSide: 'top' }}>Таблица перевода</caption>\n            <thead>\n                {floatConvert ? (\n                    <tr>\n                        <td>Целая часть</td>\n                        <td>\n                            Дробная часть ({convertible} * {radix})\n                        </td>\n                    </tr>\n                ) : (\n                    <tr>\n                        <td>Делимое</td>\n                        <td>Остаток</td>\n                    </tr>\n                )}\n            </thead>\n            <tbody>\n                {rows.map(\n                    ([{ value: a, correct: a_correct }, { value: b, correct: b_correct }], i) => (\n                        <tr key={i}>\n                            <td>\n                                <input\n                                    value={a}\n                                    onChange={(e) => onRowChange(0, i, e)}\n                                    onKeyDown={(e) => onRowKeyPressed(i, e)}\n                                    className={'nes-input ' + (a_correct ? 'is-success' : '')}\n                                    style={{ textAlign: 'right' }}\n                                />\n                            </td>\n                            <td>\n                                <input\n                                    value={b}\n                                    onChange={(e) => onRowChange(1, i, e)}\n                                    onKeyDown={(e) => onRowKeyPressed(i, e)}\n                                    className={'nes-input ' + (b_correct ? 'is-success' : '')}\n                                />\n                            </td>\n                        </tr>\n                    )\n                )}\n            </tbody>\n        </table>\n    );\n\n    return (\n        <div className={'convertTable '}>\n            {convertTable}\n            {decodedNumber !== '' && <div>Возможный ответ: {decodedNumber}</div>}\n        </div>\n    );\n}\n","import React, { Component, useState } from 'react';\nimport SortableTree, { walk } from 'react-sortable-tree';\nimport SortableTreeFullDragTheme from 'react-sortable-tree-theme-full-node-drag';\nimport 'react-sortable-tree/style.css';\nimport _ from 'lodash'; // This only needs to be imported once in your app\n\nfunction getNodeKey({ node, treeIndex }) {\n    // return node.title + '_' + treeIndex.toString();\n    return node.id;\n}\n\nlet id_count = 0;\n\nfunction makeNode(title, prob, temporary = false) {\n    return {\n        title,\n        temporary,\n        prob,\n        subtitle: (e) => 'Frequency: ' + e.node.prob.toPrecision(2) + '; Code: ' + e.node.code,\n        id: id_count++,\n        code: '_',\n    };\n}\n\nexport default function HuffmanTree({ params: [msg], userAnswer, onChange }) {\n    const initTreeState = () => {\n        let freq = {};\n        for (let ch of Array.from(msg)) {\n            freq[ch] = freq[ch] ? freq[ch] + 1 : 1;\n        }\n        return Object.entries(freq).map(([char, frequency]) =>\n            makeNode(char, frequency / msg.length)\n        );\n    };\n\n\n    const treeData = userAnswer.additionalProperties?.tree ?? initTreeState();\n    const setTreeData = (data) => {\n        let answer = _.cloneDeep(userAnswer);\n        answer.additionalProperties.tree = data;\n        onChange(answer);\n    };\n\n    const canDrop = (params) => {\n        const { nextParent } = params;\n        return !(nextParent && (!nextParent.temporary || nextParent.children.length > 2));\n    };\n\n    const onMoveNode = (params) => {\n        const { treeData, nextParentNode, prevPath } = params;\n\n        if (prevPath.length >= 2) {\n            let p = prevPath[prevPath.length - 2];\n            let n = null;\n            walk({\n                treeData,\n                getNodeKey,\n                ignoreCollapsed: false,\n                callback: ({ node }) => {\n                    if (node.id === p) n = node;\n                },\n            });\n            if (n != null) {\n                n.prob = n.children.reduce((acc, curr) => acc + curr.prob, 0);\n                n.title =\n                    '{ ' + n.children.reduce((acc, curr) => acc + curr.title + ' ', '') + ' }';\n            }\n        }\n\n        if (!nextParentNode || !nextParentNode.temporary) return;\n        nextParentNode.prob = nextParentNode.children.reduce((acc, curr) => acc + curr.prob, 0);\n        nextParentNode.title = `{${nextParentNode.children.reduce(\n            (acc, curr) => acc + curr.title,\n            ''\n        )}}`;\n\n        const recursiveNaming = (node, code) => {\n            node.code = code;\n            if (node.children && node.children.length >= 1) {\n                recursiveNaming(node.children[0], code + '0');\n                if (node.children.length >= 2) {\n                    recursiveNaming(node.children[1], code + '1');\n                }\n            }\n        };\n\n        let treeDataCopy = _.cloneDeep(treeData);\n        for (let i = 0; i < treeData.length; ++i) recursiveNaming(treeDataCopy[i], '');\n        setTreeData(treeDataCopy);\n    };\n\n    const onClick = (e) => {\n        let next = _.cloneDeep(treeData);\n        next.push(makeNode('TMP', 0.0, true));\n        setTreeData(next);\n    };\n\n    let treeIsCorrect = userAnswer.additionalProperties?.treeIsCorrect ?? false;\n\n    let containerTitle = treeIsCorrect ?\n        (<p className={'title'} style={{color: \"green\"}}>Редактор деревьев (Дерево построено верно!) </p>)\n        : (<p className={'title'}>Редактор деревьев</p>);\n\n    return (\n        <div\n            className={'nes-container is-rounded with-title'}\n            style={{ height: '600px', marginTop: 20, paddingBottom: 100 }}\n        >\n            {containerTitle}\n            <button className={'nes-btn'} style={{ margin: '20px' }} onClick={onClick}>\n                Добавить узел-связку\n            </button>\n            <SortableTree\n                treeData={treeData}\n                onChange={setTreeData}\n                onMoveNode={onMoveNode}\n                canDrop={canDrop}\n                getNodeKey={getNodeKey}\n                theme={SortableTreeFullDragTheme}\n            />\n        </div>\n    );\n}\n","import React, { useState } from 'react';\nimport Popup from 'reactjs-popup';\nimport 'bootstrap-pixel-icons/bootstrap-pixel-icons.css';\n\nexport default function InfoPopup({ msg }) {\n    if (msg.length === 0) return '';\n    return (\n        <Popup\n            trigger={\n                <span\n                    style={{\n                        fontSize: '3em',\n                        color: 'green',\n                    }}\n                    className='px-question-circle nes-pointer'\n                />\n            }\n            position={'left bottom'}\n            on='hover'\n            closeOnDocumentClick\n            mouseLeaveDelay={100}\n            mouseEnterDelay={0}\n        >\n            <div style={{ width: '300px' }}>\n                <div className={'nes-balloon from-right'}>\n                    <p>{msg}</p>\n                </div>\n            </div>\n        </Popup>\n    );\n}\n","import React, {useState} from 'react';\n\nimport './digitInput.css';\n\nconst InputBox = ({id, type, handleKeyDown2, handleChange, handleFocus, name, inputRef, inputProps}) => {\n\tconst minDigit = 0, maxDigit = 1;\n\n\tconst [digit, setDigit] = useState('0');\n\n\tconst digitChange = (val) => {\n\t\tif (val < minDigit) val = maxDigit;\n\t\telse if (val > maxDigit) val = minDigit;\n\t\tlet d = val.toString();\n\t\tsetDigit(d);\n\t\thandleChange(id, d);\n\t}\n\n\tconst onDigitIncrement = (operation) => {\n\t\tlet num = Number.parseInt(digit) || 0;\n\t\tif (operation === '+') {\n\t\t\tnum++;\n\t\t} else if (operation === '-') {\n\t\t\tnum--;\n\t\t}\n\t\tdigitChange(num);\n\t};\n\n\tconst handleKeyDown = (e) => {\n\t\tconst {key} = e;\n\t\tif (key >= '0' && key <= '1') {\n\t\t\tdigitChange(Number.parseInt(key));\n\t\t} else if (key === 'ArrowUp') {\n\t\t\tonDigitIncrement('+');\n\t\t} else if (key === 'ArrowDown') {\n\t\t\tonDigitIncrement('-');\n\t\t}\n\t}\n\n\treturn (\n\t\t<div {...inputProps} className={'digitInputField'}>\n\t\t\t{/*<span onClick={() => onDigitIncrement('+')} className={'plusButton'}>+</span>*/}\n\t\t\t<span onClick={() => onDigitIncrement('+')} className={'plusButton'}>x</span>\n\t\t\t<input className={'digitInput'}\n\t\t\t\t   type={type}\n\t\t\t\t   onKeyDown={handleKeyDown}\n\t\t\t\t   onChange={handleChange}\n\t\t\t\t   onFocus={handleFocus}\n\t\t\t\t   maxLength='1'\n\t\t\t\t   name={name}\n\t\t\t\t   ref={inputRef}\n\t\t\t\t   value={digit}\n\t\t\t/>\n\n\t\t\t{/*<span onClick={() => onDigitIncrement('-')} className={'minusButton'}>-</span>*/}\n\t\t</div>\n\t)\n\n}\n\n\nexport default InputBox;\n","import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport InputBox from './InputBox';\n\nclass InputBoxesComponent extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {characterArray: Array(props.amount).fill('0')}\n\n        this.handleKeyDown = this.handleKeyDown.bind(this)\n        this.handleFocus = this.handleFocus.bind(this)\n        this.handleChange = this.handleChange.bind(this)\n        this.inputElements = {}\n    }\n\n    componentDidMount() {\n        if (this.props.autoFocus) {\n            this.inputElements['input0'].select()\n        }\n    }\n\n    shouldComponentUpdate(nextProps) {\n        return this.props.amount !== nextProps.amount ||\n            this.props.inputRegExp !== nextProps.inputRegExp;\n    }\n\n    renderItems() {\n        let items = [];\n\n        for (let i = 0; i < this.props.amount; i++) {\n            items.push(\n                <InputBox\n                    id={i}\n                    type={this.props.password ? 'password' : 'text'}\n                    key={i}\n                    handleKeyDown={this.handleKeyDown}\n                    handleFocus={this.handleFocus}\n                    handleChange={this.handleChange}\n                    name={'input' + i}\n                    inputProps={this.props.inputProps && this.props.inputProps[i]}\n                    inputRef={el => {\n                        if (!el) return;\n                        this.inputElements[el.name] = el\n                    }}\n                />\n            )\n        }\n\n        return items;\n    }\n\n    render() {\n        return (<div style={{display: 'flex'}}>{this.renderItems()}</div>);\n    }\n\n    handleChange(id, digit) {\n        this.setState(prevState => {\n            let newChars = prevState.characterArray.map((char, i) => {\n                    if (i === id) return digit;\n                    return char || '0';\n                }\n            )\n            return {characterArray: newChars};\n        }, () => this.props.handleOutputString(this.state.characterArray.join('')));\n    }\n\n    handleKeyDown({target, key}) {\n        // console.log('Key down', key);\n\n        if (key === 'Backspace') {\n            if (target.value === '' && target.previousElementSibling !== null) {\n                target.previousElementSibling.value = ''\n                this.focusPrevChar(target)\n            } else {\n                target.value = ''\n            }\n            this.setModuleOutput(target)\n        } else if (key === 'ArrowLeft') {\n            this.focusPrevChar(target);\n        } else if (key === 'ArrowRight' || key === ' ') {\n            this.focusNextChar(target);\n        }\n    }\n\n    handleFocus({target}) {\n        const el = target;\n        // In most browsers .select() does not work without the added timeout.\n        setTimeout(function () {\n            el.select()\n        }, 0)\n    }\n\n    focusPrevChar(target) {\n        if (target.previousElementSibling !== null) {\n            target.previousElementSibling.focus()\n        }\n    }\n\n    focusNextChar(target) {\n        if (target.nextElementSibling !== null) {\n            target.nextElementSibling.focus()\n        }\n    }\n\n    setModuleOutput() {\n        this.setState(prevState => {\n            let updatedCharacters = prevState.characterArray.map(\n                (character, number) => {\n                    if (this.inputElements['input' + number].value === '')\n                        return this.inputElements['input' + number].placeholder;\n                    return this.inputElements['input' + number].value\n                }\n            );\n            return {characterArray: updatedCharacters};\n        }, () => this.props.handleOutputString(this.state.characterArray.join('')))\n    }\n}\n\nInputBoxesComponent.defaultProps = {\n    amount: 5,\n    autoFocus: false,\n    inputRegExp: /^[0-1]$/,\n    password: false\n}\nInputBoxesComponent.propTypes = {\n    amount: PropTypes.number,\n    autoFocus: PropTypes.bool,\n    inputRegExp: PropTypes.instanceOf(RegExp),\n    password: PropTypes.bool,\n    handleOutputString: PropTypes.func.isRequired\n}\n\nexport default InputBoxesComponent;\n","import React, { useState } from 'react';\r\nimport InpuxBoxes from './InputBoxes/InputBoxesComponent';\r\nimport Slider, { Range } from 'rc-slider';\r\nimport './SliderHandle.css';\r\nimport _ from 'lodash';\r\n\r\nexport default function FloatRepresentation({\r\n                                                params: [toConvert], userAnswer, onChange, gridSize\r\n                                            }) {\r\n    let answer = _.cloneDeep(userAnswer);\r\n    if (answer.additionalProperties.float_grid === undefined)\r\n        answer.additionalProperties.float_grid = {};\r\n\r\n    let enteredNumberIsCorrect = userAnswer.additionalProperties?.float_grid?.correct ?? false;\r\n    let selectedBitsAreCorrect = userAnswer.additionalProperties?.float_grid?.bitsCorrect ?? false;\r\n\r\n\r\n    const [marks, setMarks] = useState(() => {\r\n        let marks = {};\r\n        for (let i = 0; i < gridSize + 1; ++i) {\r\n            let l = i * 100 / (gridSize);\r\n            marks[l] = i;\r\n        }\r\n        return marks;\r\n    });\r\n\r\n    const [selectedInput, setSelectedInput] = useState([-1, -1]);\r\n    const [enteredNumber, setEnteredNumber] = useState(''.padEnd(gridSize, '0'));\r\n    const [selectedBits, setSelectedBits] = useState([-1, -1]);\r\n\r\n\r\n    const slideOnChange = (values) => {\r\n        const rounded_vals = values.map(v => Math.floor(((100 - v) / 100) * (gridSize + 1)));\r\n        setSelectedInput(rounded_vals);\r\n        setSelectedBits(rounded_vals.map(v => 32 - v));\r\n        answer.additionalProperties.float_grid.selectedBits = rounded_vals.map(v => 32 - v);\r\n        onChange(answer);\r\n    };\r\n\r\n    const inputChanged = (val) => {\r\n        setEnteredNumber(val);\r\n        answer.additionalProperties.float_grid.enteredNumber = val;\r\n        onChange(answer);\r\n    };\r\n\r\n    let range = [Math.min(...selectedInput), Math.max(...selectedInput)];\r\n    let inputProps = {};\r\n    for (let i = 0; i < gridSize; i++) {\r\n        inputProps[i] = { placeholder: '0' };\r\n        if (i === range[0] || i === range[1]) {\r\n            inputProps[i].style = { color: 'greenyellow' };\r\n        } else if (i > range[0] && i < range[1]) {\r\n            inputProps[i].style = { color: 'green' };\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div style={{ marginTop: '20px', marginBottom: '40px' }}>\r\n                <div>\r\n                    <InpuxBoxes\r\n                        amount={gridSize}\r\n                        // autoFocus\r\n                        handleOutputString={inputChanged}\r\n                        inputProps={inputProps}\r\n                        inputRegExp={/^[0-1]$/}\r\n                    />\r\n                </div>\r\n\r\n                <Range\r\n                    marks={marks} step={100 / gridSize}\r\n                    onChange={slideOnChange}\r\n                    reverse={true}\r\n                />\r\n\r\n            </div>\r\n\r\n            {<div>Возможный ответ: {enteredNumber}</div>}\r\n            {selectedBitsAreCorrect && <div style={{ color: 'green' }}>Биты для экспоненты выбраны верно</div>}\r\n            {enteredNumberIsCorrect && <div style={{ color: 'green' }}>Разрядная сетка построена верно</div>}\r\n\r\n        </>\r\n    );\r\n}","import React from 'react';\nimport './Question.css';\nimport ConvertDecimalTable from './ConvertDecimalTable';\nimport { formatTable } from './EncodingTable';\nimport { ExpressionEvaluator } from './ExpressionEvaluator';\nimport HuffmanTree from './HuffmanTree';\nimport _ from 'lodash';\nimport { UserAnswer } from '../../Tasks/utilities';\nimport InfoPopup from './InfoPopup';\nimport FloatRepresentation from \"./FloatRepresentation/FloatRepresentation\";\n\nexport const AnswerStatus = Object.freeze({\n    WRONG: 1,\n    NONE: 2,\n    RIGHT: 3,\n});\n\nexport default function Question({ onInputChange, keyId, userAnswer, task }) {\n    const onMainInputChange = (e) => {\n        let u = _.cloneDeep(userAnswer);\n        u.mainAnswer.value = e.target.value;\n        onInputChange(u);\n    };\n\n    const onAdditionalComponentChange = (answer) => {\n        onInputChange(answer);\n    };\n\n    const className = 'nes-input ' + (userAnswer.mainAnswer.correct ? 'is-success' : '');\n    return (\n        <div className='testCard'>\n            <div className='questionText'>\n                {task.taskDescription.text}\n            </div>\n\n            {task.taskClass.uses_float_grid &&\n                <FloatRepresentation\n                    params={task.taskDescription.params}\n                    userAnswer={userAnswer}\n                    onChange={onAdditionalComponentChange}\n                    gridSize={32}\n                />\n            }\n            {task.taskClass.uses_table && formatTable(task.taskDescription.params)}\n            {task.taskClass.uses_calculator && ExpressionEvaluator()}\n            {task.taskClass.uses_convert_table && (\n                <ConvertDecimalTable\n                    floatConvert={false}\n                    params={task.taskDescription.params}\n                    userAnswer={userAnswer}\n                    onChange={onAdditionalComponentChange}\n                />\n            )}\n            {task.taskClass.uses_float_convert_table && (\n                <ConvertDecimalTable\n                    floatConvert={true}\n                    params={task.taskDescription.params}\n                    userAnswer={userAnswer}\n                    onChange={onAdditionalComponentChange}\n                />\n            )}\n            {task.taskClass.uses_huffman_tree && (\n                <HuffmanTree\n                    params={task.taskDescription.params}\n                    userAnswer={userAnswer}\n                    onChange={onAdditionalComponentChange}\n                />\n            )}\n\n            <div className='inputField'>\n                <label htmlFor='answerField'> Введите ответ: </label>\n                <input\n                    name={'answerField'}\n                    id={keyId}\n                    value={task.userAnswer}\n                    onChange={onMainInputChange}\n                    className={className}\n                />\n                <InfoPopup msg={task.taskClass.additionalInformation()} />\n                <i className='nes-kirby' />\n            </div>\n        </div>\n    );\n}\n","import React from 'react';\n\nexport function formatTable([_, table]) {\n    return (\n        <div style={{ margin: '10px' }}>\n            <table\n                className='nes-table is-bordered is-centered with-title'\n                style={{ margin: 'auto' }}\n            >\n                <thead>\n                    <tr>\n                        <td> Символ</td>\n                        {Object.entries(table.from_table).map(([k, v], i) => {\n                            return <td key={i}> {v} </td>;\n                        })}\n                    </tr>\n                </thead>\n                <tbody>\n                    <tr>\n                        <td> Подстановка</td>\n                        {Object.entries(table.from_table).map(([k, v], i) => {\n                            return <td key={i}> {k} </td>;\n                        })}\n                    </tr>\n                </tbody>\n            </table>\n        </div>\n    );\n}\n","import React, { useState } from 'react';\nimport Question, { AnswerStatus } from '../Question/Question';\nimport './TestBlock.css';\nimport { powerOfTwo, randBool, randInt } from '../../Tasks/utilities';\n\nclass RandRange {\n    constructor(a, b, callback) {\n        this.a = a;\n        this.b = b;\n        this.callback = callback;\n    }\n\n    getNum() {\n        let num = Math.random() * (this.b - this.a) + this.a;\n        return this.callback(num);\n    }\n}\n\nfunction questinator(getParams) {\n    return (strings, ...paramNums) => {\n        return () => {\n            let [params, answer] = getParams();\n\n            let finalString = [];\n            for (let i = 0; i < strings.length; i++) {\n                finalString.push(strings[i]);\n                if (paramNums[i] !== undefined) {\n                    finalString.push(params[paramNums[i]].toString());\n                }\n            }\n            return {\n                answer: answer,\n                text: finalString.join(''),\n            };\n        };\n    };\n}\n\nconst infQuestions = [\n    questinator(() => {\n        let num = new RandRange(1, 11, (n) => n | 0).getNum();\n        return [[num], Math.pow(2, num)];\n    })`Из скольких букв состоит равновероятный алфавит, если одна буква этого алфавита несет ${0} бита информации?`,\n\n    questinator(() => {\n        let a = new RandRange(4, 8, (n) => Math.pow(2, n | 0)).getNum();\n        let b = new RandRange(3, 7, (n) => Math.log2(a | 0) * (n | 0)).getNum();\n\n        let ans = b / Math.log2(a | 0);\n        return [[a, b], ans];\n    })`Сообщение составлено из символов равновероятного алфавита. Чему равно количество символов в этом сообщении, если известно, что алфавит состоит из ${0} символов, а сообщение несет ${1} бита информации`,\n\n    questinator(() => {\n        let a = new RandRange(2, 12, powerOfTwo).getNum();\n        let b = new RandRange(2, 12, powerOfTwo).getNum();\n        let c = new RandRange(1, 6, powerOfTwo).getNum();\n\n        let ans = a * b * Math.log2(c);\n        return [[a, b, c], ans];\n    })`Какое количество информации заключается в черно-белом изображении на телеэкране, если экран содержит ${0} линий, каждая линия – ${1} экранных точек, а каждая точка имеет ${2} градаций яркости?`,\n\n    questinator(() => {\n        let a = new RandRange(2, 100, (n) => n | 0).getNum();\n        let b = new RandRange(1, 6, powerOfTwo).getNum();\n        let ans = a * Math.log2(b);\n        return [[a, b], ans];\n    })`Определить максимальную энтропию системы, состоящей из ${0} элементов, каждый из которых может находиться в одном из ${1}-х состояний.`,\n];\nconst encodingQuestions = [\n    questinator(() => {\n        let a = new RandRange(5, 70, (n) => n | 0).getNum();\n        let b = new RandRange(7, 20, (n) => n | 0).getNum();\n        let amountInfo = Math.floor(Math.log2(a) * b * 100) / 100;\n        let volumeInfo = Math.ceil(Math.log2(a)) * b;\n        return [[a, b], [amountInfo, volumeInfo].join(';')];\n    })`Составить равномерный двоичный код для передачи сообщений некоторого ${0}-буквенного алфавита. Чему равны количество и объем информации при передачи ${1}-буквенного слова этого алфавита, если все его символы равновероятны? Округлить до сотых.`,\n\n    questinator(() => {\n        let a = new RandRange(8, 88, (n) => n | 0).getNum();\n        let ternary = Math.ceil(Math.log2(a) / Math.log2(3));\n        let binary = Math.ceil(Math.log2(a));\n        return [[a], [ternary, binary].join(';')];\n    })`Определить минимальную разрядность равномерного троичного кода для кодирования алфавита из ${0} букв. Как изменится результат, если код будет двоичным?`,\n\n    questinator(() => {\n        let letterSubs = [\n            ['A', 'H'],\n            ['B', 'G'],\n            ['C', 'F'],\n            ['D', 'E'],\n            ['E', 'D'],\n            ['F', 'C'],\n            ['G', 'B'],\n            ['H', 'A'],\n        ];\n\n        let a = '';\n        let ans = '';\n        for (let i = 0; i < 5; i++) {\n            let index = (Math.random() * letterSubs.length) | 0;\n            a += letterSubs[index][0];\n            ans += letterSubs[index][1];\n        }\n\n        return [[a], ans];\n    })`Закодировать сообщение ${0} с помощью шифров простой замены: \\n A B C D E F G H \\n H G F E D C B A`,\n];\nconst radixQuestions = [\n    questinator(() => {\n        let example = '101.111';\n        let lLen = randInt(2, 5);\n        let rLen = randInt(2, 5);\n\n        let ans = 0;\n        let lString = '';\n        for (let i = 0; i < lLen; i++) {\n            let b = randBool();\n            if (b || i === 0) {\n                lString += '1';\n                ans += Math.pow(2, lLen - i - 1);\n            } else {\n                lString += '0';\n            }\n        }\n\n        let rString = '';\n        for (let i = 0; i < rLen; i++) {\n            let b = randBool();\n            if (b) {\n                rString += '1';\n                ans += Math.pow(2, -i - 1);\n            } else {\n                rString += '0';\n            }\n        }\n\n        return [[lString + '.' + rString], ans];\n    })`Перевести число ${0} из двоичной в десятичную систему счисления`,\n\n    questinator(() => {\n        let example = '101.111';\n        let lLen = randInt(2, 5);\n        let rLen = randInt(2, 5);\n\n        let ans = 0;\n        let lString = '';\n        for (let i = 0; i < lLen; i++) {\n            let b = randBool();\n            if (b || i === 0) {\n                lString += '1';\n                ans += Math.pow(2, lLen - i - 1);\n            } else {\n                lString += '0';\n            }\n        }\n\n        let rString = '';\n        for (let i = 0; i < rLen; i++) {\n            let b = randBool();\n            if (b) {\n                rString += '1';\n                ans += Math.pow(2, -i - 1);\n            } else {\n                rString += '0';\n            }\n        }\n\n        return [[ans], lString + '.' + rString];\n    })`Перевести число ${0} из десятичной в двоичную систему счисления`,\n\n    questinator(() => {\n        let lLen = randInt(2, 5);\n        let rLen = randInt(2, 5);\n\n        let ans = 0;\n        let lString = '';\n        for (let i = 0; i < lLen; i++) {\n            let b = randBool();\n            if (b || i === 0) {\n                lString += '1';\n                ans += Math.pow(2, lLen - i - 1);\n            } else {\n                lString += '0';\n            }\n        }\n\n        let rString = '';\n        for (let i = 0; i < rLen; i++) {\n            let b = randBool();\n            if (b) {\n                rString += '1';\n                ans += Math.pow(2, -i - 1);\n            } else {\n                rString += '0';\n            }\n        }\n        let a = lString + '.' + rString;\n\n        lString = '';\n        for (let i = 0; i < lLen; i++) {\n            let b = randBool();\n            if (b || i === 0) {\n                lString += '1';\n                ans += Math.pow(2, lLen - i - 1);\n            } else {\n                lString += '0';\n            }\n        }\n\n        rString = '';\n        for (let i = 0; i < rLen; i++) {\n            let b = randBool();\n            if (b) {\n                rString += '1';\n                ans += Math.pow(2, -i - 1);\n            } else {\n                rString += '0';\n            }\n        }\n        let b = lString + '.' + rString;\n\n        return [[a, b], ans];\n    })`Сложить числа ${0} и ${1} в двоичной СС в столбик и перевести результат в десятичную систему счисления`,\n];\nconst machineArithm = [\n    questinator(() => {\n        let lLen = randInt(2, 5);\n        let rLen = randInt(2, 5);\n\n        let ans = 0;\n        let lString = '';\n        for (let i = 0; i < lLen; i++) {\n            let b = randBool();\n            if (b || i === 0) {\n                lString += '1';\n                ans += Math.pow(2, lLen - i - 1);\n            } else {\n                lString += '0';\n            }\n        }\n\n        let rString = '';\n        for (let i = 0; i < rLen; i++) {\n            let b = randBool();\n            if (b) {\n                rString += '1';\n                ans += Math.pow(2, -i - 1);\n            } else {\n                rString += '0';\n            }\n        }\n\n        let defaultNum = lString + '.' + rString;\n        let reverseCode = defaultNum\n            .split('')\n            .map((ch) => (ch === '1' ? '0' : ch === '0' ? '1' : ch))\n            .join('');\n        let complementCode = '';\n        let firstZeroAtIndex = reverseCode\n            .split('')\n            .reverse()\n            .findIndex((e) => e === '0');\n\n        let fstZero = reverseCode.length - firstZeroAtIndex - 1;\n        if (firstZeroAtIndex < 0) {\n            complementCode = '1' + reverseCode;\n        } else {\n            for (let i = 0; i < reverseCode.length; i++) {\n                if (reverseCode[i] === '.') complementCode += reverseCode[i];\n                else if (i < fstZero) complementCode += reverseCode[i];\n                else if (i === fstZero) complementCode += '1';\n                else complementCode += '0';\n            }\n        }\n\n        return [\n            [defaultNum],\n            [defaultNum, reverseCode, complementCode].join(';'),\n        ];\n    })`Записать прямой, дополнительный и обратный код для двоичного числа ${0}. В качестве разделителя использовать точку с запятой`,\n];\n\n\n\n\nexport default function TestBlock({ tasks, answers }) {\n    const onAnswerEnter = (i, answer) => {\n        tasks[i].taskUpdateAnswer(answer);\n    };\n\n\n    let tests = tasks.map((task, i) => (\n        <li className={'nes-container is-rounded'} key={i}>\n            <div style={{ display: \"inherit\", width: \"inherit\", top: -15 }} className=\"nes-badge is-splited\">\n                <span style={{width: \"10%\"}} className=\"is-success\">{i+1}</span>\n                <span style={{width: \"90%\"}} className=\"is-dark\">{task.taskClass.taskName}</span>\n            </div>\n            <Question\n                keyId={i}\n                task={task}\n                onInputChange={(answer) => onAnswerEnter(i, answer)}\n                userAnswer={answers[i]}\n            />\n        </li>\n    ));\n\n    let correctAnswers = answers.filter((a) => a.mainAnswer.correct).length;\n    return (\n        <div className='App'>\n            <ul> {tests} </ul>\n            <div>\n                {correctAnswers} из {answers.length} правильно\n            </div>\n\n            {correctAnswers === answers.length && (\n                <section className='icon-list'>\n                    <i className='nes-octocat animate'/>\n                </section>\n            )}\n        </div>\n    );\n}\n","import _ from 'lodash';\n\nexport class ProtoTask {\n    static taskName;\n    static paramsLength;\n\n    // features\n    static uses_table;\n    static uses_calculator;\n    static uses_convert_table;\n    static uses_float_convert_table;\n    static uses_float_grid;\n\n    // interface\n    static solve(params) {\n        throw new Error('Should be implemented!');\n        return { mainAnswer: 'Empty solution' };\n    }\n\n    static additionalInformation() {\n        // return this.taskName.length % 3 != 0 ? 'AAAAA AAAAA AAAAA AAAAAAAAAAAAAA' : '';\n        return 'PLACE HOLDER\\n' + this.getText([]);\n    }\n\n    static generateTask() {\n        throw new Error('Should be implemented!');\n        return { params: [], text: 'description of the task' };\n    }\n\n    static getText(params) {\n        throw new Error('Should be implemented!');\n        return 'Empty text';\n    }\n\n    static checkAnswerAndReduce(taskDescription, userAnswer) {\n        let isCorrect = this.solve(taskDescription.params).toString() === userAnswer.mainAnswer.value.toString();\n        let answer = _.cloneDeep(userAnswer);\n        answer.mainAnswer.correct = isCorrect;\n        return answer;\n    }\n}\n","import { randInt, Table } from './utilities';\nimport { ProtoTask } from './_ProtoTask';\nimport _ from 'lodash';\n\nexport class Task6 extends ProtoTask {\n    static taskName = 'Равномерный двоичный код для передачи сообщения';\n    static paramsLength = 2;\n\n    static solve([a, b]) {\n        let amountInfo = Math.floor(Math.log2(a) * b * 100) / 100;\n        let volumeInfo = Math.ceil(Math.log2(a)) * b;\n        return `${amountInfo};${volumeInfo}`;\n    }\n\n    static generateTask() {\n        let a = randInt(5, 70);\n        let b = randInt(7, 20);\n        let params = [a, b];\n        return { params, text: this.getText(params) };\n    }\n\n    static getText(params) {\n        for (let i = 0; i < this.paramsLength; ++i)\n            params[i] = params[i] ?? String.fromCharCode('A'.charCodeAt(0) + i);\n        return `Составить равномерный двоичный код для передачи сообщений некоторого ${params[0]}-буквенного алфавита. Чему равны количество и объем информации при передачи ${params[1]}-буквенного слова этого алфавита, если все его символы равновероятны? Округлить до сотых.`;\n    }\n}\n\nexport class Task7 extends ProtoTask {\n    static taskName = 'Минимальная разрядность равномерного троичного кода';\n    static paramsLength = 1;\n\n    static solve([a]) {\n        let ternary = Math.ceil(Math.log2(a) / Math.log2(3));\n        let binary = Math.ceil(Math.log2(a));\n        return `${ternary};${binary}`;\n    }\n\n    static generateTask() {\n        let a = randInt(8, 88);\n        let params = [a];\n        return { params, text: this.getText(params) };\n    }\n\n    static getText(params) {\n        for (let i = 0; i < this.paramsLength; ++i)\n            params[i] = params[i] ?? String.fromCharCode('A'.charCodeAt(0) + i);\n        return `Определить минимальную разрядность равномерного троичного кода для кодирования алфавита из ${params[0]} букв. Как изменится результат, если код будет двоичным?`;\n    }\n}\n\nexport class SimpleCipherEncode extends ProtoTask {\n    static taskName = 'Кодирование с помощью простой замены';\n    static paramsLength = 2;\n    static uses_table = true;\n\n    static solve([msg, table]) {\n        return Array.from(msg)\n            .map((ch) => table.decode(ch))\n            .join('');\n    }\n\n    static generateTask() {\n        let msgLength = 5;\n        let alphabetSize = msgLength;\n        let table = new Table(alphabetSize);\n\n        let msg = new Array(msgLength)\n            .fill(0)\n            .map((_) =>\n                randInt(0, alphabetSize, (num) => String.fromCharCode('A'.charCodeAt(0) + num))\n            )\n            .map((ch) => table.encode(ch))\n            .join('');\n\n        let params = [msg, table];\n        return { params, text: this.getText(params) };\n    }\n\n    static getText(params) {\n        for (let i = 0; i < this.paramsLength; ++i)\n            params[i] = params[i] ?? String.fromCharCode('A'.charCodeAt(0) + i);\n        return `Закодировать сообщение ${params[0]} с помощью шифров простой замены`;\n    }\n}\n\nexport class HuffmanEncoding extends ProtoTask {\n    static taskName = 'Кодирование методом Хаффмана';\n    static paramsLength = 2;\n    static uses_huffman_tree = true;\n\n    static solve([msg]) {\n        class NodeTree {\n            constructor(left, right) {\n                this.left = left;\n                this.right = right;\n            }\n\n            children = () => [this.left, this.right];\n            nodes = () => this.children();\n            toStr = () => `${this.left}_${this.right}`;\n        }\n\n        const huffman_code_tree = (node, left = true, binString = '') => {\n            if (typeof node === 'string') {\n                return { [node]: binString };\n            }\n            const [l, r] = node.children();\n            return {\n                ...huffman_code_tree(l, true, binString + '0'),\n                ...huffman_code_tree(r, false, binString + '1'),\n            };\n        };\n\n        let freq = {};\n        for (let ch of Array.from(msg)) {\n            freq[ch] = freq[ch] ? freq[ch] + 1 : 1;\n        }\n\n        let nodes = Object.entries(freq)\n            .map(([k, v]) => [k, v])\n            .sort(([k1, v1], [k2, v2]) => v2 - v1);\n\n        while (nodes.length > 1) {\n            const [key1, c1] = nodes[nodes.length - 1];\n            const [key2, c2] = nodes[nodes.length - 2];\n            nodes = nodes.slice(0, -2);\n            const node = new NodeTree(key1, key2);\n            nodes.push([node, c1 + c2]);\n            nodes = nodes.sort(([k1, v1], [k2, v2]) => v2 - v1);\n        }\n        const root = nodes[0];\n\n        const huffmanCode = huffman_code_tree(root[0]);\n        return {\n            mainAnswer: Array.from(msg)\n                .map((ch) => huffmanCode[ch])\n                .join(''),\n            tree: root,\n            huffmanCode,\n        };\n    }\n\n    static checkTree(tree) {\n        if (tree?.length === 1) {\n            let nodes = [];\n            const collectNodes = (node, depth) => {\n                nodes.push({\n                    code: node.code,\n                    depth,\n                    title: node.title,\n                    prob: node.prob,\n                    temporary: node.temporary,\n                });\n\n                if (node.children) for (let ch of node.children) collectNodes(ch, depth + 1);\n            };\n            collectNodes(tree[0], 0);\n\n            nodes.sort((a, b) => {\n                return a.prob === b.prob ? a.depth - b.depth : a.prob - b.prob;\n            });\n\n            for (let i = 0; i < nodes.length; i++) {\n                let node_a = nodes[i];\n\n                if (node_a.code.length === 0 && !node_a.temporary) return false;\n\n                for (let j = i + 1; j < nodes.length; j++) {\n                    let node_b = nodes[j];\n\n                    let prob_a = Math.floor(node_a.prob * 1000) / 1000,\n                        prob_b = Math.floor(node_b.prob * 1000) / 1000;\n\n                    if (\n                        node_a.code.length * node_b.code.length > 0 &&\n                        node_a.depth < node_b.depth &&\n                        prob_a < prob_b\n                    ) {\n                        // console.log('Something wrong with nodes:', nodes[i], nodes[j]);\n                        return false;\n                    }\n                }\n            }\n        } else {\n            return false;\n        }\n        return true;\n    }\n\n    static decodeMessage([msg], userAnswer) {\n        let nodes = [];\n        const collectNodes = (node, depth) => {\n            nodes.push(node);\n            if (node.children) for (let ch of node.children) collectNodes(ch, depth + 1);\n        };\n        collectNodes(userAnswer.additionalProperties.tree[0], 0);\n\n        let letters = {};\n        for (let n of nodes) {\n            if (!n.temporary) {\n                letters[n.title] = n.code;\n            }\n        }\n        return Array.from(msg)\n            .map((char) => letters[char])\n            .join('');\n    }\n\n    static checkAnswerAndReduce(taskDescription, userAnswer) {\n        let { mainAnswer, tree, huffmanCode } = this.solve(taskDescription.params);\n\n        let treeIsCorrect = this.checkTree(userAnswer.additionalProperties?.tree);\n        let isCorrect = false;\n        if (treeIsCorrect) {\n            let decoded_msg = this.decodeMessage(taskDescription.params, userAnswer);\n            if (decoded_msg === userAnswer.mainAnswer.value.toString()) isCorrect = true;\n        }\n\n        let answer = _.cloneDeep(userAnswer);\n        answer.additionalProperties.treeIsCorrect = treeIsCorrect;\n        answer.mainAnswer.correct = isCorrect;\n\n        return answer;\n    }\n\n    static generateTask() {\n        let msgLength = 10;\n        let alphabetSize = randInt(3, 6);\n        let msg = Array(msgLength)\n            .fill(0)\n            .map((ch) =>\n                randInt(0, alphabetSize, (num) => String.fromCharCode('A'.charCodeAt(0) + num))\n            )\n            .join('');\n\n        this.solve([msg]);\n\n        let params = [msg];\n        return { params, text: this.getText(params) };\n    }\n\n    static getText(params) {\n        for (let i = 0; i < this.paramsLength; ++i)\n            params[i] = params[i] ?? String.fromCharCode('A'.charCodeAt(0) + i);\n        return `Построить двоичный код Хаффмана для алфавита использующегося в сообщении ${params[0]} и переписать это сообщение используя полученный код`;\n    }\n}\n","import { powerOfTwo, randDouble, randInt } from './utilities';\nimport {ProtoTask} from \"./_ProtoTask\";\n\n\nexport class SizeOfAlphabet extends ProtoTask {\n    static taskName = \"Размер алфавита\"\n    static paramsLength = 1;\n    static uses_calculator = true;\n\n    static solve([bitsInOneLetter]) {\n        return Math.pow(2, bitsInOneLetter);\n    }\n\n    static additionalInformation() {\n        return 'Some text info';\n    }\n\n    static generateTask() {\n        let bitsInOneLetter = randInt(1, 11);\n        let params = [bitsInOneLetter];\n        return { params, text: this.getText(params) };\n    }\n\n    static getText(params) {\n        for (let i = 0; i < this.paramsLength; ++i)\n            params[i] = params[i] ?? String.fromCharCode('A'.charCodeAt(0) + i);\n        return `Из скольких букв состоит равновероятный алфавит, если одна буква этого алфавита несет ${params[0]} бит(а) информации?`;\n    }\n}\n\nexport class LengthOfMSG extends ProtoTask {\n    static taskName = \"Длина сообщения\"\n    static paramsLength = 2;\n    static uses_calculator = true;\n\n    static solve([a, b]) {\n        return b / Math.log2(a | 0);\n    }\n\n    static generateTask() {\n        let a = randDouble(4, 8, (n) => Math.pow(2, n | 0));\n        let b = randDouble(3, 7, (n) => Math.log2(a | 0) * (n | 0));\n        let params = [a, b];\n        return { params, text: this.getText(params) };\n    }\n\n    static getText(params) {\n        for (let i = 0; i < this.paramsLength; ++i)\n            params[i] = params[i] ?? String.fromCharCode('A'.charCodeAt(0) + i);\n        return `Сообщение составлено из символов равновероятного алфавита. Чему равно количество символов в этом сообщении, если известно, что алфавит состоит из ${params[0]} символов, а сообщение несет ${params[1]} бита информации`;\n    }\n}\n\nexport class Task3 extends ProtoTask {\n    static taskName = \"Кол-во информации на экране\"\n    static paramsLength = 3;\n    static uses_calculator = true;\n\n    static solve([a, b, c]) {\n        return a * b * Math.log2(c);\n    }\n\n    static generateTask() {\n        let a = randInt(2, 12, powerOfTwo);\n        let b = randInt(2, 12, powerOfTwo);\n        let c = randInt(1, 6, powerOfTwo);\n\n        let params = [a, b, c];\n        return { params, text: this.getText(params) };\n    }\n\n    static getText(params) {\n        for (let i = 0; i < this.paramsLength; ++i)\n            params[i] = params[i] ?? String.fromCharCode('A'.charCodeAt(0) + i);\n        return `Какое количество информации заключается в черно-белом изображении на телеэкране, если экран содержит ${params[0]} линий, каждая линия – ${params[1]} экранных точек, а каждая точка имеет ${params[2]} градаций яркости?`;\n    }\n}\n\nexport class Task4 extends ProtoTask {\n    static taskName = \"Максимальная энтропия системы\"\n    static paramsLength = 2;\n    static uses_calculator = true;\n\n    static solve([a, b]) {\n        return a * Math.log2(b);\n    }\n\n    static generateTask() {\n        let a = randInt(2, 100, (n) => n | 0);\n        let b = randInt(1, 6, powerOfTwo);\n        let params = [a, b];\n        return { params, text: this.getText(params) };\n    }\n\n    static getText(params) {\n        for (let i = 0; i < this.paramsLength; ++i)\n            params[i] = params[i] ?? String.fromCharCode('A'.charCodeAt(0) + i);\n        return `Определить максимальную энтропию системы, состоящей из ${params[0]} элементов, каждый из которых может находиться в одном из ${params[1]}-х состояний.`;\n    }\n}\n\nexport class Task5 extends ProtoTask {\n    static taskName = \"Энтропия алфавита\"\n    static paramsLength = 2;\n    static uses_calculator = true;\n\n    static solve([msg]) {\n        let letters = {};\n        for (let ch of Array.from(msg)) {\n            letters[ch] = letters[ch] ? letters[ch]+1 : 1;\n        }\n        let probs = {};\n        for (let [char, n] of Object.entries(letters)) {\n            probs[char] = n / msg.length;\n        }\n        let sum = 0;\n        for (let [char, prob] of Object.entries(probs)) {\n            sum += prob * Math.log2(prob)\n        }\n\n        return -sum;\n    }\n\n    static generateTask() {\n        let msgLength = 10;\n        let alphabetSize = randInt(2, 4);\n        let msg = Array(msgLength)\n            .fill(0)\n            .map((ch) =>\n                randInt(0, alphabetSize, (num) =>\n                    String.fromCharCode('a'.charCodeAt(0) + num)\n                )\n            ).join('');\n\n        let params = [msg];\n        return { params, text: this.getText(params) };\n    }\n\n    static getText(params) {\n        for (let i = 0; i < this.paramsLength; ++i)\n            params[i] = params[i] ?? String.fromCharCode('A'.charCodeAt(0) + i);\n        return `Найти энтропию алфавита, задействованного в сообщении: \"${params[0]}\"`;\n    }\n}\n","import { convertRadix, digitToChar, randBool, randDouble, randInt } from './utilities';\nimport { ProtoTask } from './_ProtoTask';\nimport _ from 'lodash';\n\nexport class ConvertDecimalToN extends ProtoTask {\n    static taskName = 'Конвертация из десятичной СС';\n    static paramsLength = 2;\n    static uses_calculator = true;\n    static uses_convert_table = true;\n\n    static solve([number, base]) {\n        let remainderParts = [];\n        let intParts = [];\n        let n = number;\n        while (n > 0) {\n            remainderParts.push(n % base);\n            intParts.push(n);\n            n = (n / base) | 0;\n        }\n        return {\n            mainAnswer: remainderParts\n                .map((a) => digitToChar(a))\n                .reverse()\n                .join(''),\n            table: intParts.map((a, i) => [a, remainderParts[i]])\n        };\n    }\n\n    static checkAnswerAndReduce(taskDescription, userAnswer) {\n        let answer = _.cloneDeep(userAnswer);\n        let { mainAnswer, table } = this.solve(taskDescription.params);\n        answer.mainAnswer.correct =\n            mainAnswer.toString() === userAnswer.mainAnswer.value.toString();\n\n        // compare table\n        answer.additionalProperties.table = userAnswer.additionalProperties.table.map(\n            ([fst_col, snd_col], i) => [\n                { ...fst_col, correct: table[i] && fst_col.value === table[i][0].toString() },\n                { ...snd_col, correct: table[i] && snd_col.value === table[i][1].toString() }\n            ]\n        );\n\n        return answer;\n    }\n\n    static generateTask() {\n        let number = randInt(1, 1024);\n        let base = randInt(2, 17, (a) => (a === 10 ? 11 : a));\n        let params = [number, base];\n        return { params, text: this.getText(params) };\n    }\n\n    static getText(params) {\n        for (let i = 0; i < this.paramsLength; ++i)\n            params[i] = params[i] ?? String.fromCharCode('A'.charCodeAt(0) + i);\n        return `Перевести число ${params[0]} из десятичной системы в СС с основанием ${params[1]}.`;\n    }\n}\n\nexport class ConvertNtoDecimal extends ProtoTask {\n    static taskName = 'Конвертация в десятичную СС';\n    static paramsLength = 2;\n    static uses_calculator = true;\n\n    static solve([number, base]) {\n        return convertRadix(number, base, 10);\n    }\n\n    static generateTask() {\n        let base = randInt(2, 17, (a) => (a === 10 ? 11 : a));\n        let number = convertRadix(randInt(1, 1024), 10, base);\n        let params = [number, base];\n        return { params, text: this.getText(params) };\n    }\n\n    static getText(params) {\n        for (let i = 0; i < this.paramsLength; ++i)\n            params[i] = params[i] ?? String.fromCharCode('A'.charCodeAt(0) + i);\n        return `Перевести число ${params[0]} из системы счисления с основанием ${params[1]} в десятичную.`;\n    }\n}\n\nexport class ConvertDecimalFloatToN extends ProtoTask {\n    static taskName = 'Конвертация дроби из десятичной СС в двоичную';\n    static paramsLength = 2;\n    static uses_float_convert_table = true;\n    static uses_calculator = true;\n\n    static solve([number, base]) {\n        let answer = '';\n        let num = number;\n        while (num !== 0) {\n            num *= base;\n            if (num < 1) {\n                answer += '0';\n            } else {\n                num -= num | 0;\n                answer += 1;\n            }\n        }\n        return answer;\n    }\n\n    static checkAnswerAndReduce(taskDescription, userAnswer) {\n        const userAnswerString = userAnswer.mainAnswer.value.toString().replace('0.', '');\n        const correctAnswer = this.solve(taskDescription.params).toString();\n        const isCorrect = correctAnswer === userAnswerString;\n        let answer = _.cloneDeep(userAnswer);\n        answer.mainAnswer.correct = isCorrect;\n        return answer;\n    }\n\n    static generateTask() {\n        let length = randInt(1, 5);\n        let base = 2; //randInt(2, 16, (a) => (a === 10 ? 16 : a));\n\n        let ans = 0;\n        while (ans === 0) {\n            for (let i = 0; i < length; i++) {\n                ans += randBool() ? Math.pow(base, -i - 1) : 0;\n            }\n        }\n        let params = [ans, base];\n        return { params, text: this.getText(params) };\n    }\n\n    static getText(params) {\n        for (let i = 0; i < this.paramsLength; ++i)\n            params[i] = params[i] ?? String.fromCharCode('A'.charCodeAt(0) + i);\n        return `Перевести число с плавающей запятой ${params[0]} из десятичной системы в СС с основанием ${params[1]}.`;\n    }\n}\n\n\nexport class FloatRepresentationTask extends ProtoTask {\n    static taskName = 'Представление чисел с плавающей запятой';\n    static paramsLength = 1;\n    static uses_calculator = true;\n    static uses_float_grid = true;\n\n    static solve([numberString]) {\n        let num = 0;\n        switch (numberString) {\n            case '-Infinity':\n                num = -Infinity;\n                break;\n            case 'Infinity':\n                num = Infinity;\n                break;\n            case '0':\n                num = 0;\n                break;\n            case 'NaN':\n                num = NaN;\n                break;\n            default:\n                num = Number.parseFloat(numberString);\n                break;\n        }\n        const answer = this.FloatToIEEE(num);\n        return answer;\n    }\n\n    static FloatToIEEE(f) {\n        let buf = new ArrayBuffer(8);\n        (new Float32Array(buf))[0] = f;\n        return ((new Uint32Array(buf))[0] >>> 0).toString(2).padStart(32, '0');\n    }\n\n    static IEEEToDouble(f) {\n        let buffer = new ArrayBuffer(8);\n        (new Uint32Array(buffer))[0] = Number.parseInt(f, 2);\n        return new Float32Array(buffer)[0];\n    }\n\n\n    static additionalInformation() {\n        return 'Для выбора нужных битов воспользуйтесь двумя стрелками в нижнем правом углу разрядной сетки';\n    }\n\n    static checkAnswerAndReduce(taskDescription, userAnswer) {\n        const correctAnswer = this.solve(taskDescription.params).toString();\n        console.log('Correct answer: ', correctAnswer);\n\n        let mainAnswerIsCorrect = correctAnswer === userAnswer.mainAnswer.value.toString();\n        let selectedBitsAreCorrect = true;\n        let enteredNumberIsCorrect = true;\n\n        const selectedBits = userAnswer.additionalProperties.float_grid.selectedBits;\n        const enteredNumber = userAnswer.additionalProperties.float_grid.enteredNumber;\n\n        if (!selectedBits) selectedBitsAreCorrect = false;\n        else if ([...selectedBits].sort().toString() !== [24, 31].toString()) selectedBitsAreCorrect = false;\n\n        if (!enteredNumber) enteredNumberIsCorrect = false;\n        if (enteredNumber !== correctAnswer) enteredNumberIsCorrect = false;\n        if (!selectedBitsAreCorrect || !enteredNumberIsCorrect) mainAnswerIsCorrect = false;\n\n        let answer = _.cloneDeep(userAnswer);\n        answer.mainAnswer.correct = mainAnswerIsCorrect;\n        answer.additionalProperties.float_grid.correct = enteredNumberIsCorrect;\n        answer.additionalProperties.float_grid.bitsCorrect = selectedBitsAreCorrect;\n\n        return answer;\n    }\n\n    static generateTask() {\n        let specialCases = ['-Infinity', 'Infinity', '0', 'NaN'];\n        let useSpecialCase = randDouble(0, 1.0) < 0.3;\n\n        let length = randInt(0, 4);\n        let number = 0;\n        for (let i = 0; i < length; i++) {\n            number += randBool() ? Math.pow(2, -i - 1) : 0;\n        }\n        number += randInt(0, 32);\n        if (randBool()) number *= -1;\n\n        let toConvert = useSpecialCase ? specialCases[randInt(0, 4)] : number.toString();\n        let params = [toConvert];\n        return { params, text: this.getText(params) };\n    }\n\n    static getText(params) {\n        // +-Inf, 0, NaN\n        for (let i = 0; i < this.paramsLength; ++i)\n            params[i] = params[i] ?? String.fromCharCode('A'.charCodeAt(0) + i);\n        return `Выберите диапазон битов, выделенных для экспоненты в представлении числа с плавающей запятой.\n         А также запишите '${params[0]}' в эту разрядную сетку согласно правилам.`;\n    }\n}\n\n","import * as encodingTasks from './basic_encoding';\nimport * as informationTasks from './information_measurement';\nimport * as radixTasks from './positional_radix';\nimport { isClass } from './utilities';\n\n\nexport default function LoadAllTasks() {\n    const allTasks = [informationTasks, encodingTasks, radixTasks].flatMap((t, i) =>\n        Object.entries(t)\n            // .filter(([k, v]) => isClass(v))\n            .map(([k, v]) => v)\n    );\n    return allTasks;\n}\n","import React, { useState } from 'react';\nimport TestBlock from '../TestBlock/TestBlock';\nimport './App.css';\nimport _ from 'lodash';\n\nimport getAllTasks from '../../Tasks/_LoadAllTasks';\nimport { UserAnswer } from '../../Tasks/utilities';\n\nlet allTasks = getAllTasks();\n\nlet initialTasks = [];\ninitInitialTasks(initialTasks);\n\nfunction initInitialTasks(initialTasks) {\n    let url = new URL(window.location.href);\n    let topics = {};\n    for (let [k, v] of url.searchParams) {\n        if (v === '') continue;\n        let name = k.replaceAll('_', ' ');\n        topics[name] = parseInt(v);\n    }\n    for (let t of allTasks) {\n        if (t.taskName in topics) {\n            for (let i = 0; i < topics[t.taskName]; ++i) {\n                initialTasks.push(t);\n            }\n        }\n    }\n\n    if (initialTasks.length === 0) {\n        initialTasks.push(...allTasks);\n    }\n}\n\nconst createInitialTasks = (setTaskAnswers) =>\n    initialTasks.map((task, index) => {\n        let taskDescription = task.generateTask();\n\n        return {\n            taskClass: task,\n            taskDescription,\n            taskUpdateAnswer: (userAnswer) => {\n                setTaskAnswers((prevTaskAnswers) => {\n                    let taskAnswers = _.cloneDeep(prevTaskAnswers);\n                    taskAnswers[index] = task.checkAnswerAndReduce(taskDescription, userAnswer);\n                    return taskAnswers;\n                });\n            },\n        };\n    });\n\nfunction App() {\n    const [taskAnswers, setTaskAnswers] = useState(\n        new Array(initialTasks.length).fill(0).map((_) => new UserAnswer())\n    );\n    const [tasks, setTasks] = useState((_) => createInitialTasks(setTaskAnswers));\n\n    return (\n        <div className={'root'}>\n            <div className='TestBlock'>\n                <TestBlock tasks={tasks} answers={taskAnswers} />\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","import React, { useState } from 'react';\nimport './Settings.css'\nimport getAllTasks from '../../Tasks/_LoadAllTasks';\n\nlet allTasks = getAllTasks();\nlet initialTasks = [...allTasks];\n\nfunction ThemeChooser({ name, id, setChecked }) {\n    let [numberEnabled, setNumberEnabled] = useState(false);\n    let [text, setText] = useState('0');\n\n    const onChange = (e) => {\n        setText(numberEnabled ? '0' : '1');\n        setNumberEnabled(!numberEnabled);\n\n        setChecked((prevState) => {\n            let newState = prevState.map((a) => ({ ...a }));\n            newState[id].number = numberEnabled ? '0' : '1';\n            return newState;\n        });\n    };\n\n    const onTextEnter = (e) => {\n        setText(e.target.value);\n\n        let val = e.target.value;\n        setChecked((prevState) => {\n            let newState = prevState.map((a) => ({ ...a }));\n            newState[id].number = numberEnabled ? val : '0';\n            return newState;\n        });\n    };\n\n    return (\n        <div>\n            <label>\n                <input\n                    size={3}\n                    type='number'\n                    value={text}\n                    disabled={!numberEnabled}\n                    min={0}\n                    pattern={/[\\d]*/}\n                    onChange={onTextEnter}\n                    className={'nes-input'}\n                    style={{ borderImageOutset: 0, margin: 1 }}\n                />\n            </label>\n            <label>\n                <input\n                    id={'check' + id}\n                    type='checkbox'\n                    onChange={onChange}\n                    className={'nes-checkbox'}\n                />\n                <span>{name}</span>\n            </label>\n        </div>\n    );\n}\n\nfunction formatLink(pairs) {\n    let mainLink = `${window.location.origin}`;\n\n    let params = pairs\n        .filter((check) => check.number > 0)\n        .map((check) => `${check.name.replaceAll(' ', '_')}=${check.number}`)\n        .join('&');\n    if (params.length > 0) {\n        mainLink += '?' + params;\n    }\n    return mainLink;\n}\n\nexport default function Settings() {\n    // const задачи = [\n    //     'Измерение информации',\n    //     'Основы кодирования',\n    //     'Системы счисления',\n    //     'Основы машинной арифметики',\n    // ];\n\n    const задачи = initialTasks.map((a) => a.taskName ?? a.name);\n    let checkedInit = задачи.map((name) => ({\n        name,\n        number: 0,\n    }));\n    const [checked, setChecked] = useState(checkedInit);\n\n    return (\n        <div style={{marginTop: 10}} className={'nes-container is-rounded with-title task-list'}>\n            <div className={'title'}>Выбери тему и кол-во заданий</div>\n\n            {задачи.map((name, index) => (\n                <ThemeChooser name={name} id={index} key={index} setChecked={setChecked} />\n            ))}\n            {checked.length !== 0 && (\n                <div className={'nes-text is-error'}>\n                    Ссылка:\n                    <a href={formatLink(checked)}>{formatLink(checked)}</a>\n                </div>\n            )}\n        </div>\n    );\n}\n","import App from './App/App';\nimport React from 'react';\nimport { Link, Route, Switch, HashRouter } from 'react-router-dom';\nimport Settings from './Settings/Settings';\nimport 'nes.css/css/nes.min.css';\nimport _ from \"lodash\";\n\n\nexport default function Main() {\n\n    return (\n        <div className={'root'}>\n            <HashRouter>\n                <div className=' nes-container with-title is-rounded'>\n                    <p className='title'>Выбор раздела</p>\n                    <Link style={{ marginRight: '-5px' }} className={'nes-btn'} to={'/'}>\n                        Тестирование\n                    </Link>\n                    <Link className={'nes-btn'} to={'/settings'}>\n                        Настройки\n                    </Link>\n\n                    <div className='nes-badge' style={{ marginLeft: '100px', width: '400px' }}>\n                        <span className='is-success'>Тесты-тесты-тесты!</span>\n                        <i className='nes-icon is-large star'/>\n                    </div>\n                </div>\n\n                <Switch>\n                    <Route path={['/settings']} component={Settings} />\n                    <Route path={['/']} component={App} />\n                </Switch>\n            </HashRouter>\n        </div>\n    );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport Main from \"./components/Main\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Main />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n","import React, { useState } from 'react';\n\nexport function ExpressionEvaluator() {\n    const [inputNum, setInputNum] = useState('0');\n\n    let evaluationResult = '0';\n    try {\n        let input = inputNum.replaceAll('log2', 'Math.log2');\n        evaluationResult = eval(input);\n    } catch (e) {}\n    if (typeof evaluationResult === 'object' || evaluationResult === '' || evaluationResult === undefined) {\n        evaluationResult = '???';\n    }\n\n    return (\n        <div style={{ textAlign: 'left', fontSize: '0.9rem' }}>\n            Калькулятор:\n            <input\n                className={'nes-input'}\n                style={{ width: '19rem', borderImageOutset: 0 }}\n                value={inputNum}\n                onChange={(e) => setInputNum(e.target.value)}\n                // pattern={'^[0-9]*$'}\n            />\n            = <label> {evaluationResult} </label>\n        </div>\n    );\n}\n"],"sourceRoot":""}