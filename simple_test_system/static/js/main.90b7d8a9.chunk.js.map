{"version":3,"sources":["Tasks/utilities.js","components/Question/ConvertDecimalTable.js","components/Question/HuffmanTree.js","components/Question/FloatRepresentation/InputBoxes/InputBox.js","components/Question/FloatRepresentation/InputBoxes/InputBoxesComponent.js","components/Question/FloatRepresentation/FloatRepresentation.js","components/Question/Question.js","components/Question/EncodingTable.js","components/TestBlock/TestBlock.js","Tasks/_ProtoTask.js","Tasks/basic_encoding.js","Tasks/information_measurement.js","Tasks/positional_radix.js","Tasks/_LoadAllTasks.js","components/App/App.js","components/Settings/Settings.js","components/Main.js","index.js","components/Question/InfoPopup.js","components/Question/Calculator.js"],"names":["randDouble","a","b","callback","Math","random","randInt","randBool","powerOfTwo","n","pow","shuffleArray","array","prev","repeats","i","length","j","floor","Table","size","letters","Array","fill","map","String","fromCharCode","charCodeAt","from_letters","to_letters","this","from_table","to_table","char","digitToChar","digit","convertRadix","num","fromRadix","toRadix","parseInt","toString","toUpperCase","UserAnswer","mainAnswer","value","correct","additionalProperties","_","cloneDeep","ConvertDecimalTable","floatConvert","params","convertible","radix","userAnswer","onChange","checkCorrectAnswer","emptyRow","rows","table","setRows","getNewRows","answer","decodedNumber","filter","k","join","v","reverse","onRowChange","colNum","rowNum","e","isNaN","Number","target","prevRows","newRows","onRowKeyPressed","key","keyCode","slice","preventDefault","convertTable","className","style","captionSide","a_correct","b_correct","onKeyDown","textAlign","getNodeKey","node","treeIndex","id","id_count","makeNode","title","prob","temporary","subtitle","toPrecision","code","HuffmanTree","msg","blockedInput","treeData","tree","freq","from","ch","Object","entries","initTreeState","setTreeData","data","treeIsCorrect","containerTitle","color","height","marginTop","paddingBottom","margin","onClick","next","unshift","onMoveNode","nextParentNode","prevPath","p","walk","ignoreCollapsed","children","reduce","acc","curr","recursiveNaming","treeDataCopy","canDrop","nextParent","theme","SortableTreeFullDragTheme","generateNodeProps","path","buttons","removeNodeAtPath","InputBox","type","handleChange","handleKeyDown2","handleFocus","name","inputRef","inputProps","useState","setDigit","digitChange","val","d","onDigitIncrement","operation","onFocus","maxLength","ref","InputBoxesComponent","props","state","characterArray","amount","handleKeyDown","bind","inputElements","autoFocus","select","nextProps","inputRegExp","items","push","password","el","display","renderItems","setState","prevState","handleOutputString","previousElementSibling","focusPrevChar","setModuleOutput","focusNextChar","setTimeout","focus","nextElementSibling","character","number","placeholder","Component","defaultProps","FloatRepresentation","gridSize","undefined","float_grid","enteredNumberIsCorrect","selectedBitsAreCorrect","bitsCorrect","marks","selectedInput","setSelectedInput","padEnd","enteredNumber","setEnteredNumber","setSelectedBits","range","min","max","marginBottom","step","values","rounded_vals","selectedBits","freeze","WRONG","NONE","RIGHT","Question","onInputChange","keyId","task","onAdditionalComponentChange","answerIsIncorrect","taskDescription","text","taskClass","uses_float_grid","uses_table","formatTable","uses_calculator","Calculator","uses_convert_table","uses_float_convert_table","uses_huffman_tree","htmlFor","u","disabled","InfoPopup","additionalInformation","correctAnswer","TestBlock","tasks","answers","blockInputsAfterBtnPressed","setBlockedInput","tests","width","top","taskName","taskUpdateAnswer","onAnswerEnter","correctAnswers","ProtoTask","Error","solve","isCorrect","Task6","amountInfo","log2","volumeInfo","ceil","getText","paramsLength","Task7","ternary","binary","SimpleCipherEncode","decode","encode","HuffmanEncoding","NodeTree","left","right","nodes","toStr","sort","v1","key1","c1","key2","c2","root","huffmanCode","huffman_code_tree","binString","l","r","collectNodes","depth","node_a","node_b","prob_a","prob_b","checkTree","decoded_msg","decodeMessage","alphabetSize","SizeOfAlphabet","bitsInOneLetter","LengthOfMSG","Task3","c","Task4","Task5","probs","sum","round","ConvertDecimalToN","base","remainderParts","intParts","fst_col","snd_col","ConvertNtoDecimal","ConvertDecimalFloatToN","userAnswerString","replace","ans","FloatRepresentationTask","numberString","Infinity","NaN","parseFloat","FloatToIEEE","f","buf","ArrayBuffer","Float32Array","Uint32Array","padStart","buffer","mainAnswerIsCorrect","useSpecialCase","LoadAllTasks","informationTasks","encodingTasks","radixTasks","flatMap","t","allTasks","getAllTasks","initialTasks","url","URL","window","location","href","topics","searchParams","split","initInitialTasks","App","taskAnswers","setTaskAnswers","index","generateTask","prevTaskAnswers","checkAnswerAndReduce","createInitialTasks","dontCheckCorrectAnswer","ThemeChooser","setChecked","numberEnabled","setNumberEnabled","setText","pattern","newState","borderImageOutset","formatLink","pairs","showCorrectAnswersChecked","mainLink","check","Settings","assignments","checkedInit","checked","setShowCorrectAnswersChecked","showCorrectAnswerCheckBox","padding","Main","marginRight","to","marginLeft","component","ReactDOM","render","StrictMode","document","getElementById","scale","dir","trigger","fontSize","position","on","closeOnDocumentClick","mouseLeaveDelay","mouseEnterDelay","inputNum","setInputNum","evaluationResult","eval","helpMsg"],"mappings":"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","file":"static/js/main.90b7d8a9.chunk.js","sourcesContent":["import _ from \"lodash\";\n\nexport function questinator(getParams) {\n    return (strings, ...paramNums) => {\n        return () => {\n            let [params, answer] = getParams();\n\n            let finalString = [];\n            for (let i = 0; i < strings.length; i++) {\n                finalString.push(strings[i]);\n                if (paramNums[i] !== undefined) {\n                    finalString.push(params[paramNums[i]].toString());\n                }\n            }\n            return {\n                answer: answer,\n                text: finalString.join(''),\n            };\n        };\n    };\n}\n\nexport function randDouble(a, b, callback = (a) => a) {\n    return callback(Math.random() * (b - a) + a);\n}\n\nexport function randInt(a, b, callback = (a) => a) {\n    return callback((Math.random() * (b - a) + a) | 0);\n}\n\nexport function randBool() {\n    return Math.random() > 0.5;\n}\n\nexport function powerOfTwo(n) {\n    return Math.pow(2, n | 0);\n}\n\nexport function shuffleArray(array) {\n    let prev = [...array];\n    let repeats = true;\n    while (repeats) {\n        repeats = false;\n        for (let i = array.length - 1; i > 0; i--) {\n            const j = Math.floor(Math.random() * (i + 1));\n            [array[i], array[j]] = [array[j], array[i]];\n        }\n\n        for (let i = 0; i < array.length; ++i) {\n            if (prev[i] === array[i]) {\n                repeats = true;\n            }\n        }\n    }\n}\n\nexport class Table {\n    constructor(size) {\n        let letters = new Array(size)\n            .fill(0)\n            .map((a, i) => String.fromCharCode('A'.charCodeAt(0) + i));\n        shuffleArray(letters);\n        let from_letters = [...letters];\n        shuffleArray(letters);\n        let to_letters = [...letters];\n\n        this.from_table = {};\n        this.to_table = {};\n        for (let i = 0; i < letters.length; ++i) {\n            this.from_table[from_letters[i]] = to_letters[i];\n            this.to_table[to_letters[i]] = from_letters[i];\n        }\n    }\n\n    encode(char) {\n        return this.from_table[char]\n    }\n\n    decode(char) {\n        return this.to_table[char]\n    }\n}\n\nexport function digitToChar(digit) {\n    if (digit < 10) {\n        return String.fromCharCode( '0'.charCodeAt(0) + digit );\n    } else if (digit < 36) {\n        return String.fromCharCode( 'A'.charCodeAt(0) + digit - 10 );\n    } else {\n        return '?';\n    }\n}\n\nexport function convertRadix(num, fromRadix, toRadix) {\n    return parseInt(num, fromRadix).toString(toRadix).toUpperCase();\n}\n\nexport function isClass(o) {\n    // doesn't work\n    return o.toString().startsWith('class');\n}\n\nexport class UserAnswer {\n    constructor() {\n        this.mainAnswer = {\n            value: 0,\n            correct: false,\n        };\n        this.additionalProperties = {}\n    }\n\n    clone() {\n        return _.cloneDeep(this);\n    }\n}","import React, { useState } from 'react';\nimport { digitToChar } from '../../Tasks/utilities';\nimport _ from 'lodash';\n\nexport default function ConvertDecimalTable({\n                                                floatConvert,\n                                                params: [convertible, radix],\n                                                userAnswer,\n                                                onChange, checkCorrectAnswer\n                                            }) {\n    const emptyRow = [\n        { value: '', correct: false },\n        { value: '', correct: false }\n    ];\n    let rows = userAnswer.additionalProperties?.table ?? [emptyRow];\n\n    const setRows = (getNewRows) => {\n        let answer = _.cloneDeep(userAnswer);\n        answer.additionalProperties.table = getNewRows(rows);\n        onChange(answer);\n    };\n\n    let decodedNumber = '';\n    if (rows[0] && rows[0][1].value !== '') {\n        if (floatConvert)\n            decodedNumber =\n                '0.' +\n                rows\n                    .filter(([{ value: k }, _]) => k !== '')\n                    .map(([{ value: k }, _]) => digitToChar(parseInt(k)))\n                    .join('');\n        else\n            decodedNumber = rows\n                .filter(([_, { value: v }]) => v !== '')\n                .map(([_, { value: v }]) => digitToChar(parseInt(v)))\n                .reverse()\n                .join('');\n    }\n\n    const onRowChange = (colNum, rowNum, e) => {\n        if (isNaN(Number(e.target.value))) return;\n        let value = e.target.value;\n\n        setRows((prevRows) => {\n            // let newRows = prevRows.map((row) => [...row]);\n            let newRows = _.cloneDeep(prevRows);\n            newRows[rowNum][colNum].value = value;\n            return newRows;\n        });\n    };\n\n    const onRowKeyPressed = (rowNum, e) => {\n        if (rowNum === rows.length - 1) {\n            if (e.key === 'Enter') {\n                setRows((prevRows) => [..._.cloneDeep(prevRows), _.cloneDeep(emptyRow)]);\n            } else if (e.keyCode === 8 && rows.length > 1 && e.target.value === '') {\n                // backspace\n                setRows((prevRows) => _.cloneDeep(prevRows).slice(0, -1));\n                // prevRows.map((r) => [...r]).slice(0, -1));\n                e.preventDefault();\n            }\n        }\n    };\n\n    const convertTable = (\n        <table className='nes-table is-bordered is-centered'>\n            <caption style={{ captionSide: 'top' }}>Таблица перевода</caption>\n            <thead>\n            {floatConvert ? (\n                <tr>\n                    <td>Целая часть</td>\n                    <td>\n                        Дробная часть ({convertible} * {radix})\n                    </td>\n                </tr>\n            ) : (\n                <tr>\n                    <td>Делимое</td>\n                    <td>Остаток</td>\n                </tr>\n            )}\n            </thead>\n            <tbody>\n            {rows.map(\n                ([{ value: a, correct: a_correct }, { value: b, correct: b_correct }], i) => (\n                    <tr key={i}>\n                        <td>\n                            <input\n                                value={a}\n                                onChange={(e) => onRowChange(0, i, e)}\n                                onKeyDown={(e) => onRowKeyPressed(i, e)}\n                                className={'nes-input ' + (a_correct ? 'is-success' : '')}\n                                style={{ textAlign: 'right' }}\n                            />\n                        </td>\n                        <td>\n                            <input\n                                value={b}\n                                onChange={(e) => onRowChange(1, i, e)}\n                                onKeyDown={(e) => onRowKeyPressed(i, e)}\n                                className={'nes-input ' + (b_correct ? 'is-success' : '')}\n                            />\n                        </td>\n                    </tr>\n                )\n            )}\n            </tbody>\n        </table>\n    );\n\n    return (\n        <div className={'convertTable '}>\n            {convertTable}\n            {checkCorrectAnswer && decodedNumber !== '' && <div>Возможный ответ: {decodedNumber}</div>}\n        </div>\n    );\n}\n","import React, { Component, useState } from 'react';\nimport SortableTree, { walk, removeNodeAtPath } from 'react-sortable-tree';\nimport SortableTreeFullDragTheme from 'react-sortable-tree-theme-full-node-drag';\nimport 'react-sortable-tree/style.css';\nimport _ from 'lodash'; // This only needs to be imported once in your app\n\nfunction getNodeKey({ node, treeIndex }) {\n    // return node.title + '_' + treeIndex.toString();\n    return node.id;\n}\n\nlet id_count = 0;\n\nfunction makeNode(title, prob, temporary = false) {\n    return {\n        title,\n        temporary,\n        prob,\n        subtitle: (e) => 'Frequency: ' + e.node.prob.toPrecision(2) + '; Code: ' + e.node.code,\n        id: id_count++,\n        code: '_'\n    };\n}\n\nexport default function HuffmanTree({ params: [msg], userAnswer, onChange, checkCorrectAnswer, blockedInput }) {\n    const initTreeState = () => {\n        let freq = {};\n        for (let ch of Array.from(msg)) {\n            freq[ch] = freq[ch] ? freq[ch] + 1 : 1;\n        }\n        return Object.entries(freq).map(([char, frequency]) =>\n            makeNode(char, frequency / msg.length)\n        );\n    };\n\n    const treeData = userAnswer.additionalProperties?.tree ?? initTreeState();\n    const setTreeData = (data) => {\n        let answer = _.cloneDeep(userAnswer);\n        answer.additionalProperties.tree = data;\n        onChange(answer);\n    };\n\n    const canDrop = (params) => {\n        const { nextParent } = params;\n        return !(nextParent && (!nextParent.temporary || nextParent.children.length > 2));\n    };\n\n    const onMoveNode = (params) => {\n        const { treeData, nextParentNode, prevPath } = params;\n\n        if (prevPath.length >= 2) {\n            let p = prevPath[prevPath.length - 2];\n            let n = null;\n            walk({\n                treeData,\n                getNodeKey,\n                ignoreCollapsed: false,\n                callback: ({ node }) => {\n                    if (node.id === p) n = node;\n                }\n            });\n            if (n != null) {\n                n.prob = n.children.reduce((acc, curr) => acc + curr.prob, 0);\n                n.title = '{ ' + n.children.reduce((acc, curr) => acc + curr.title + ' ', '') + ' }';\n            }\n        }\n\n        if (!nextParentNode || !nextParentNode.temporary) return;\n        nextParentNode.prob = nextParentNode.children.reduce((acc, curr) => acc + curr.prob, 0);\n        // nextParentNode.title = `{${nextParentNode.children.reduce(\n        //     (acc, curr) => acc + curr.title,\n        //     ''\n        // )}}`;\n        nextParentNode.title = 'Узел-связка';\n\n        const recursiveNaming = (node, code) => {\n            node.code = code;\n            if (node.children && node.children.length >= 1) {\n                recursiveNaming(node.children[0], code + '0');\n                if (node.children.length >= 2) {\n                    recursiveNaming(node.children[1], code + '1');\n                }\n            }\n        };\n\n        let treeDataCopy = _.cloneDeep(treeData);\n        for (let i = 0; i < treeData.length; ++i) recursiveNaming(treeDataCopy[i], '');\n        setTreeData(treeDataCopy);\n    };\n\n    const onClick = (e) => {\n        let next = _.cloneDeep(treeData);\n        next.unshift(makeNode('Узел-связка', 0.0, true));\n        setTreeData(next);\n    };\n\n    let treeIsCorrect = userAnswer.additionalProperties?.treeIsCorrect ?? false;\n\n    let containerTitle = checkCorrectAnswer && treeIsCorrect ?\n        (<p className={'title'} style={{ color: 'green' }}>Редактор деревьев (Дерево построено верно!) </p>)\n        : (<p className={'title'}>Редактор деревьев</p>);\n    if (checkCorrectAnswer && !treeIsCorrect && blockedInput)\n        containerTitle =  (<p className={'title'} style={{ color: 'red' }}>Редактор деревьев (Дерево построено неверно!) </p>)\n\n    const removeNodeButton = ({ node, path }) => (node.temporary && (!node.children || node.children?.length === 0) && {\n        buttons: [\n            <button onClick={() =>\n                setTreeData(removeNodeAtPath({ treeData: treeData, path, getNodeKey }))}> X </button>\n        ]\n    });\n\n    return (\n        <div\n            className={'nes-container is-rounded with-title'}\n            style={{ height: '600px', marginTop: 20, paddingBottom: 100 }}\n        >\n            {containerTitle}\n            <button className={'nes-btn'} style={{ margin: '20px' }} onClick={onClick}>\n                Добавить узел-связку\n            </button>\n            <SortableTree\n                treeData={treeData}\n                onChange={setTreeData}\n                onMoveNode={onMoveNode}\n                canDrop={canDrop}\n                getNodeKey={getNodeKey}\n                theme={SortableTreeFullDragTheme}\n                generateNodeProps={removeNodeButton}\n            />\n        </div>\n    );\n}\n","import React, {useState} from 'react';\n\nimport './digitInput.css';\n\nconst InputBox = ({id, type, handleKeyDown2, handleChange, handleFocus, name, inputRef, inputProps}) => {\n\tconst minDigit = 0, maxDigit = 1;\n\n\tconst [digit, setDigit] = useState('0');\n\n\tconst digitChange = (val) => {\n\t\tif (val < minDigit) val = maxDigit;\n\t\telse if (val > maxDigit) val = minDigit;\n\t\tlet d = val.toString();\n\t\tsetDigit(d);\n\t\thandleChange(id, d);\n\t}\n\n\tconst onDigitIncrement = (operation) => {\n\t\tlet num = Number.parseInt(digit) || 0;\n\t\tif (operation === '+') {\n\t\t\tnum++;\n\t\t} else if (operation === '-') {\n\t\t\tnum--;\n\t\t}\n\t\tdigitChange(num);\n\t};\n\n\tconst handleKeyDown = (e) => {\n\t\tconst {key} = e;\n\t\tif (key >= '0' && key <= '1') {\n\t\t\tdigitChange(Number.parseInt(key));\n\t\t} else if (key === 'ArrowUp') {\n\t\t\tonDigitIncrement('+');\n\t\t} else if (key === 'ArrowDown') {\n\t\t\tonDigitIncrement('-');\n\t\t}\n\t}\n\n\treturn (\n\t\t<div {...inputProps} className={'digitInputField'}>\n\t\t\t{/*<span onClick={() => onDigitIncrement('+')} className={'plusButton'}>+</span>*/}\n\t\t\t<span onClick={() => onDigitIncrement('+')} className={'plusButton'}>x</span>\n\t\t\t<input className={'digitInput'}\n\t\t\t\t   type={type}\n\t\t\t\t   onKeyDown={handleKeyDown}\n\t\t\t\t   onChange={handleChange}\n\t\t\t\t   onFocus={handleFocus}\n\t\t\t\t   maxLength='1'\n\t\t\t\t   name={name}\n\t\t\t\t   ref={inputRef}\n\t\t\t\t   value={digit}\n\t\t\t/>\n\n\t\t\t{/*<span onClick={() => onDigitIncrement('-')} className={'minusButton'}>-</span>*/}\n\t\t</div>\n\t)\n\n}\n\n\nexport default InputBox;\n","import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport InputBox from './InputBox';\n\nclass InputBoxesComponent extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {characterArray: Array(props.amount).fill('0')}\n\n        this.handleKeyDown = this.handleKeyDown.bind(this)\n        this.handleFocus = this.handleFocus.bind(this)\n        this.handleChange = this.handleChange.bind(this)\n        this.inputElements = {}\n    }\n\n    componentDidMount() {\n        if (this.props.autoFocus) {\n            this.inputElements['input0'].select()\n        }\n    }\n\n    shouldComponentUpdate(nextProps) {\n        return this.props.amount !== nextProps.amount ||\n            this.props.inputRegExp !== nextProps.inputRegExp;\n    }\n\n    renderItems() {\n        let items = [];\n\n        for (let i = 0; i < this.props.amount; i++) {\n            items.push(\n                <InputBox\n                    id={i}\n                    type={this.props.password ? 'password' : 'text'}\n                    key={i}\n                    handleKeyDown={this.handleKeyDown}\n                    handleFocus={this.handleFocus}\n                    handleChange={this.handleChange}\n                    name={'input' + i}\n                    inputProps={this.props.inputProps && this.props.inputProps[i]}\n                    inputRef={el => {\n                        if (!el) return;\n                        this.inputElements[el.name] = el\n                    }}\n                />\n            )\n        }\n\n        return items;\n    }\n\n    render() {\n        return (<div style={{display: 'flex'}}>{this.renderItems()}</div>);\n    }\n\n    handleChange(id, digit) {\n        this.setState(prevState => {\n            let newChars = prevState.characterArray.map((char, i) => {\n                    if (i === id) return digit;\n                    return char || '0';\n                }\n            )\n            return {characterArray: newChars};\n        }, () => this.props.handleOutputString(this.state.characterArray.join('')));\n    }\n\n    handleKeyDown({target, key}) {\n        // console.log('Key down', key);\n\n        if (key === 'Backspace') {\n            if (target.value === '' && target.previousElementSibling !== null) {\n                target.previousElementSibling.value = ''\n                this.focusPrevChar(target)\n            } else {\n                target.value = ''\n            }\n            this.setModuleOutput(target)\n        } else if (key === 'ArrowLeft') {\n            this.focusPrevChar(target);\n        } else if (key === 'ArrowRight' || key === ' ') {\n            this.focusNextChar(target);\n        }\n    }\n\n    handleFocus({target}) {\n        const el = target;\n        // In most browsers .select() does not work without the added timeout.\n        setTimeout(function () {\n            el.select()\n        }, 0)\n    }\n\n    focusPrevChar(target) {\n        if (target.previousElementSibling !== null) {\n            target.previousElementSibling.focus()\n        }\n    }\n\n    focusNextChar(target) {\n        if (target.nextElementSibling !== null) {\n            target.nextElementSibling.focus()\n        }\n    }\n\n    setModuleOutput() {\n        this.setState(prevState => {\n            let updatedCharacters = prevState.characterArray.map(\n                (character, number) => {\n                    if (this.inputElements['input' + number].value === '')\n                        return this.inputElements['input' + number].placeholder;\n                    return this.inputElements['input' + number].value\n                }\n            );\n            return {characterArray: updatedCharacters};\n        }, () => this.props.handleOutputString(this.state.characterArray.join('')))\n    }\n}\n\nInputBoxesComponent.defaultProps = {\n    amount: 5,\n    autoFocus: false,\n    inputRegExp: /^[0-1]$/,\n    password: false\n}\nInputBoxesComponent.propTypes = {\n    amount: PropTypes.number,\n    autoFocus: PropTypes.bool,\n    inputRegExp: PropTypes.instanceOf(RegExp),\n    password: PropTypes.bool,\n    handleOutputString: PropTypes.func.isRequired\n}\n\nexport default InputBoxesComponent;\n","import React, { useState } from 'react';\r\nimport InpuxBoxes from './InputBoxes/InputBoxesComponent';\r\nimport Slider, { Range } from 'rc-slider';\r\nimport './SliderHandle.css';\r\nimport _ from 'lodash';\r\n\r\nexport default function FloatRepresentation({\r\n                                                params: [toConvert], userAnswer, onChange, gridSize, checkCorrectAnswer\r\n                                            }) {\r\n    let answer = _.cloneDeep(userAnswer);\r\n    if (answer.additionalProperties.float_grid === undefined)\r\n        answer.additionalProperties.float_grid = {};\r\n\r\n    let enteredNumberIsCorrect = userAnswer.additionalProperties?.float_grid?.correct ?? false;\r\n    let selectedBitsAreCorrect = userAnswer.additionalProperties?.float_grid?.bitsCorrect ?? false;\r\n\r\n\r\n    const [marks, setMarks] = useState(() => {\r\n        let marks = {};\r\n        for (let i = 0; i < gridSize + 1; ++i) {\r\n            let l = i * 100 / (gridSize);\r\n            marks[l] = i;\r\n        }\r\n        return marks;\r\n    });\r\n\r\n    const [selectedInput, setSelectedInput] = useState([-1, -1]);\r\n    const [enteredNumber, setEnteredNumber] = useState(''.padEnd(gridSize, '0'));\r\n    const [selectedBits, setSelectedBits] = useState([-1, -1]);\r\n\r\n\r\n    const slideOnChange = (values) => {\r\n        const rounded_vals = values.map(v => Math.floor(((100 - v) / 100) * (gridSize + 1)));\r\n        setSelectedInput(rounded_vals);\r\n        setSelectedBits(rounded_vals.map(v => 32 - v));\r\n        answer.additionalProperties.float_grid.selectedBits = rounded_vals.map(v => 32 - v);\r\n        onChange(answer);\r\n    };\r\n\r\n    const inputChanged = (val) => {\r\n        setEnteredNumber(val);\r\n        answer.additionalProperties.float_grid.enteredNumber = val;\r\n        onChange(answer);\r\n    };\r\n\r\n    let range = [Math.min(...selectedInput), Math.max(...selectedInput)];\r\n    let inputProps = {};\r\n    for (let i = 0; i < gridSize; i++) {\r\n        inputProps[i] = { placeholder: '0' };\r\n        if (i === range[0] || i === range[1]) {\r\n            inputProps[i].style = { color: 'greenyellow' };\r\n        } else if (i > range[0] && i < range[1]) {\r\n            inputProps[i].style = { color: 'green' };\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div style={{ marginTop: '20px', marginBottom: '40px' }}>\r\n                <div>\r\n                    <InpuxBoxes\r\n                        amount={gridSize}\r\n                        // autoFocus\r\n                        handleOutputString={inputChanged}\r\n                        inputProps={inputProps}\r\n                        inputRegExp={/^[0-1]$/}\r\n                    />\r\n                </div>\r\n\r\n                <Range\r\n                    marks={marks} step={100 / gridSize}\r\n                    onChange={slideOnChange}\r\n                    reverse={true}\r\n                />\r\n\r\n            </div>\r\n\r\n            {checkCorrectAnswer && <div>Возможный ответ: {enteredNumber}</div>}\r\n            {checkCorrectAnswer && selectedBitsAreCorrect &&\r\n            <div style={{ color: 'green' }}>Биты для экспоненты выбраны верно</div>}\r\n            {checkCorrectAnswer && enteredNumberIsCorrect &&\r\n            <div style={{ color: 'green' }}>Разрядная сетка построена верно</div>}\r\n\r\n        </>\r\n    );\r\n}","import React from 'react';\nimport './Question.css';\nimport ConvertDecimalTable from './ConvertDecimalTable';\nimport { formatTable } from './EncodingTable';\nimport { Calculator } from './Calculator';\nimport HuffmanTree from './HuffmanTree';\nimport _ from 'lodash';\nimport { UserAnswer } from '../../Tasks/utilities';\nimport InfoPopup from './InfoPopup';\nimport FloatRepresentation from './FloatRepresentation/FloatRepresentation';\n\nexport const AnswerStatus = Object.freeze({\n    WRONG: 1,\n    NONE: 2,\n    RIGHT: 3\n});\n\nexport default function Question({ blockedInput, checkCorrectAnswer, onInputChange, keyId, userAnswer, task }) {\n\n    const onMainInputChange = (e) => {\n        let u = _.cloneDeep(userAnswer);\n        u.mainAnswer.value = e.target.value;\n        onInputChange(u);\n    };\n\n    const onAdditionalComponentChange = (answer) => {\n        onInputChange(answer);\n    };\n\n    let className = 'nes-input ' + (checkCorrectAnswer && userAnswer.mainAnswer.correct ? 'is-success' : '');\n    const answerIsIncorrect = blockedInput && className === 'nes-input ';\n    if (answerIsIncorrect)\n        className += 'is-error';\n\n    return (\n        <div className='testCard'>\n            <div className='questionText'>\n                {task.taskDescription.text}\n            </div>\n\n            {task.taskClass.uses_float_grid &&\n            (<FloatRepresentation\n                params={task.taskDescription.params}\n                userAnswer={userAnswer}\n                onChange={onAdditionalComponentChange}\n                gridSize={32}\n                checkCorrectAnswer={checkCorrectAnswer}\n            />)\n            }\n            {task.taskClass.uses_table && formatTable(task.taskDescription.params)}\n            {task.taskClass.uses_calculator && Calculator()}\n            {task.taskClass.uses_convert_table && (\n                <ConvertDecimalTable\n                    floatConvert={false}\n                    params={task.taskDescription.params}\n                    userAnswer={userAnswer}\n                    onChange={onAdditionalComponentChange}\n                    checkCorrectAnswer={checkCorrectAnswer}\n                />\n            )}\n            {task.taskClass.uses_float_convert_table && (\n                <ConvertDecimalTable\n                    floatConvert={true}\n                    params={task.taskDescription.params}\n                    userAnswer={userAnswer}\n                    onChange={onAdditionalComponentChange}\n                    checkCorrectAnswer={checkCorrectAnswer}\n                />\n            )}\n            {task.taskClass.uses_huffman_tree && (\n                <HuffmanTree\n                    params={task.taskDescription.params}\n                    userAnswer={userAnswer}\n                    onChange={onAdditionalComponentChange}\n                    checkCorrectAnswer={checkCorrectAnswer}\n                    blockedInput={blockedInput}\n                />\n            )}\n\n            <div className='inputField'>\n                <label htmlFor='answerField'> Введите ответ: </label>\n                <input\n                    name={'answerField'}\n                    id={keyId}\n                    value={task.userAnswer}\n                    onChange={onMainInputChange}\n                    className={className}\n                    disabled={blockedInput}\n                />\n                <InfoPopup msg={task.taskClass.additionalInformation()} />\n                {answerIsIncorrect && userAnswer.mainAnswer.correctAnswer && <div>\n                    Правильный ответ: {userAnswer.mainAnswer.correctAnswer}\n                </div>}\n                <i className='nes-kirby' />\n            </div>\n        </div>\n    );\n}\n","import React from 'react';\n\nexport function formatTable([_, table]) {\n    return (\n        <div style={{ margin: '10px' }}>\n            <table\n                className='nes-table is-bordered is-centered with-title'\n                style={{ margin: 'auto' }}\n            >\n                <thead>\n                    <tr>\n                        <td> Символ</td>\n                        {Object.entries(table.from_table).map(([k, v], i) => {\n                            return <td key={i}> {v} </td>;\n                        })}\n                    </tr>\n                </thead>\n                <tbody>\n                    <tr>\n                        <td> Подстановка</td>\n                        {Object.entries(table.from_table).map(([k, v], i) => {\n                            return <td key={i}> {k} </td>;\n                        })}\n                    </tr>\n                </tbody>\n            </table>\n        </div>\n    );\n}\n","import React, { useState } from 'react';\nimport Question, { AnswerStatus } from '../Question/Question';\nimport './TestBlock.css';\nimport { powerOfTwo, randBool, randInt } from '../../Tasks/utilities';\n\nclass RandRange {\n    constructor(a, b, callback) {\n        this.a = a;\n        this.b = b;\n        this.callback = callback;\n    }\n\n    getNum() {\n        let num = Math.random() * (this.b - this.a) + this.a;\n        return this.callback(num);\n    }\n}\n\nfunction questinator(getParams) {\n    return (strings, ...paramNums) => {\n        return () => {\n            let [params, answer] = getParams();\n\n            let finalString = [];\n            for (let i = 0; i < strings.length; i++) {\n                finalString.push(strings[i]);\n                if (paramNums[i] !== undefined) {\n                    finalString.push(params[paramNums[i]].toString());\n                }\n            }\n            return {\n                answer: answer,\n                text: finalString.join('')\n            };\n        };\n    };\n}\n\n\nexport default function TestBlock({ checkCorrectAnswer, tasks, answers }) {\n    const blockInputsAfterBtnPressed = !checkCorrectAnswer;\n\n    const [blockedInput, setBlockedInput] = useState(false);\n\n    const onAnswerEnter = (i, answer) => {\n        tasks[i].taskUpdateAnswer(answer);\n    };\n\n\n    let tests = tasks.map((task, i) => (\n        <li className={'nes-container is-rounded'} key={i}>\n            <div style={{ display: 'inherit', width: 'inherit', top: -15 }} className='nes-badge is-splited'>\n                <span style={{ width: '10%' }} className='is-success'>{i + 1}</span>\n                <span style={{ width: '90%' }} className='is-dark'>{task.taskClass.taskName}</span>\n            </div>\n            <Question\n                keyId={i}\n                task={task}\n                onInputChange={(answer) => onAnswerEnter(i, answer)}\n                userAnswer={answers[i]}\n                checkCorrectAnswer={blockedInput || !blockInputsAfterBtnPressed}\n                blockedInput={blockedInput}\n            />\n        </li>\n    ));\n\n\n    let correctAnswers = answers.filter((a) => a.mainAnswer.correct).length;\n    return (\n        <div className='App'>\n            <ul> {tests} </ul>\n            {(blockedInput || !blockInputsAfterBtnPressed) &&\n            <div> {correctAnswers} из {answers.length} правильно </div>}\n\n            {(blockedInput || !blockInputsAfterBtnPressed)\n            && correctAnswers === answers.length && (\n                <section className='icon-list'>\n                    <i className='nes-octocat animate' />\n                </section>\n            )}\n\n            {!checkCorrectAnswer &&\n            <button disabled={blockedInput} style={{ width: '50%' }}\n                    className={'nes-btn' + (blockedInput ? ' is-disabled' : '')}\n                    onClick={() => setBlockedInput(true)}>\n                Проверить\n            </button>}\n        </div>\n    );\n}\n","import _ from 'lodash';\n\nexport class ProtoTask {\n    static taskName;\n    static paramsLength;\n\n    // features\n    static uses_table;\n    static uses_calculator;\n    static uses_convert_table;\n    static uses_float_convert_table;\n    static uses_float_grid;\n\n    // interface\n    static solve(params) {\n        throw new Error('Should be implemented!');\n        return { mainAnswer: 'Empty solution' };\n    }\n\n    static additionalInformation() {\n        // return this.taskName.length % 3 != 0 ? 'AAAAA AAAAA AAAAA AAAAAAAAAAAAAA' : '';\n        // return 'PLACE HOLDER\\n' + this.getText([]);\n        return '';\n    }\n\n    static generateTask() {\n        throw new Error('Should be implemented!');\n        return { params: [], text: 'description of the task' };\n    }\n\n    static getText(params) {\n        throw new Error('Should be implemented!');\n        return 'Empty text';\n    }\n\n    static checkAnswerAndReduce(taskDescription, userAnswer) {\n        const correctAnswer = this.solve(taskDescription.params).toString();\n        let isCorrect = correctAnswer === userAnswer.mainAnswer.value.toString();\n        let answer = _.cloneDeep(userAnswer);\n        answer.mainAnswer.correct = isCorrect;\n        answer.mainAnswer.correctAnswer = correctAnswer;\n        return answer;\n    }\n}\n","import { randInt, Table } from './utilities';\nimport { ProtoTask } from './_ProtoTask';\nimport _ from 'lodash';\n\nexport class Task6 extends ProtoTask {\n    static taskName = 'Равномерный двоичный код для передачи сообщения';\n    static paramsLength = 2;\n\n    static solve([a, b]) {\n        let amountInfo = Math.floor(Math.log2(a) * b * 100) / 100;\n        let volumeInfo = Math.ceil(Math.log2(a)) * b;\n        return `${amountInfo};${volumeInfo}`;\n    }\n\n    static additionalInformation() {\n        return 'Ответы следует разделять точкой с запятой, т.е. если количество информации равно 4, а объём 10, то вам следует ввести \"4;10\"';\n    }\n\n    static generateTask() {\n        let a = randInt(5, 70);\n        let b = randInt(7, 20);\n        let params = [a, b];\n        return { params, text: this.getText(params) };\n    }\n\n    static getText(params) {\n        for (let i = 0; i < this.paramsLength; ++i)\n            params[i] = params[i] ?? String.fromCharCode('A'.charCodeAt(0) + i);\n        return `Составить равномерный двоичный код для передачи сообщений некоторого ${params[0]}-буквенного алфавита. Чему равны количество и объем информации при передачи ${params[1]}-буквенного слова этого алфавита, если все его символы равновероятны? Округлить до сотых.`;\n    }\n}\n\nexport class Task7 extends ProtoTask {\n    static taskName = 'Минимальная разрядность равномерного троичного кода';\n    static paramsLength = 1;\n\n    static solve([a]) {\n        let ternary = Math.ceil(Math.log2(a) / Math.log2(3));\n        let binary = Math.ceil(Math.log2(a));\n        return `${ternary};${binary}`;\n    }\n\n    static additionalInformation() {\n        return 'Вам нужно ввести два ответа, разделив их точкой с запятой (\"AAA;BBB\")';\n    }\n\n    static generateTask() {\n        let a = randInt(8, 88);\n        let params = [a];\n        return { params, text: this.getText(params) };\n    }\n\n    static getText(params) {\n        for (let i = 0; i < this.paramsLength; ++i)\n            params[i] = params[i] ?? String.fromCharCode('A'.charCodeAt(0) + i);\n        return `Определить минимальную разрядность равномерного троичного кода для кодирования алфавита из ${params[0]} букв. Как изменится результат, если код будет двоичным?`;\n    }\n}\n\nexport class SimpleCipherEncode extends ProtoTask {\n    static taskName = 'Кодирование с помощью простой замены';\n    static paramsLength = 2;\n    static uses_table = true;\n\n    static solve([msg, table]) {\n        return Array.from(msg)\n            .map((ch) => table.decode(ch))\n            .join('');\n    }\n\n    static generateTask() {\n        let msgLength = 5;\n        let alphabetSize = msgLength;\n        let table = new Table(alphabetSize);\n\n        let msg = new Array(msgLength)\n            .fill(0)\n            .map((_) =>\n                randInt(0, alphabetSize, (num) => String.fromCharCode('A'.charCodeAt(0) + num))\n            )\n            .map((ch) => table.encode(ch))\n            .join('');\n\n        let params = [msg, table];\n        return { params, text: this.getText(params) };\n    }\n\n    static getText(params) {\n        for (let i = 0; i < this.paramsLength; ++i)\n            params[i] = params[i] ?? String.fromCharCode('A'.charCodeAt(0) + i);\n        return `Закодировать сообщение ${params[0]} с помощью шифров простой замены`;\n    }\n}\n\nexport class HuffmanEncoding extends ProtoTask {\n    static taskName = 'Кодирование методом Хаффмана';\n    static paramsLength = 2;\n    static uses_huffman_tree = true;\n\n    static additionalInformation() {\n        return 'Для начала вам следует составить дерево. Все ключевые узлы для символов сообщения уже созданы. Для добавления узла-связки нажмите на соответствующую кнопку. Для того, чтобы назначить один узел в потомки другому, перетащите его мышкой на него. После того, как дерево будет составлено, вы должны будете закодировать сообщение в соответствии с ним и ввести ответ в поле ввода. Удачи!';\n    }\n\n    static solve([msg]) {\n        class NodeTree {\n            constructor(left, right) {\n                this.left = left;\n                this.right = right;\n            }\n\n            children = () => [this.left, this.right];\n            nodes = () => this.children();\n            toStr = () => `${this.left}_${this.right}`;\n        }\n\n        const huffman_code_tree = (node, left = true, binString = '') => {\n            if (typeof node === 'string') {\n                return { [node]: binString };\n            }\n            const [l, r] = node.children();\n            return {\n                ...huffman_code_tree(l, true, binString + '0'),\n                ...huffman_code_tree(r, false, binString + '1'),\n            };\n        };\n\n        let freq = {};\n        for (let ch of Array.from(msg)) {\n            freq[ch] = freq[ch] ? freq[ch] + 1 : 1;\n        }\n\n        let nodes = Object.entries(freq)\n            .map(([k, v]) => [k, v])\n            .sort(([k1, v1], [k2, v2]) => v2 - v1);\n\n        while (nodes.length > 1) {\n            const [key1, c1] = nodes[nodes.length - 1];\n            const [key2, c2] = nodes[nodes.length - 2];\n            nodes = nodes.slice(0, -2);\n            const node = new NodeTree(key1, key2);\n            nodes.push([node, c1 + c2]);\n            nodes = nodes.sort(([k1, v1], [k2, v2]) => v2 - v1);\n        }\n        const root = nodes[0];\n\n        const huffmanCode = huffman_code_tree(root[0]);\n        return {\n            mainAnswer: Array.from(msg)\n                .map((ch) => huffmanCode[ch])\n                .join(''),\n            tree: root,\n            huffmanCode,\n        };\n    }\n\n    static checkTree(tree) {\n        if (tree?.length === 1) {\n            let nodes = [];\n            const collectNodes = (node, depth) => {\n                nodes.push({\n                    code: node.code,\n                    depth,\n                    title: node.title,\n                    prob: node.prob,\n                    temporary: node.temporary,\n                });\n\n                if (node.children) for (let ch of node.children) collectNodes(ch, depth + 1);\n            };\n            collectNodes(tree[0], 0);\n\n            nodes.sort((a, b) => {\n                return a.prob === b.prob ? a.depth - b.depth : a.prob - b.prob;\n            });\n\n            for (let i = 0; i < nodes.length; i++) {\n                let node_a = nodes[i];\n\n                if (node_a.code.length === 0 && !node_a.temporary) return false;\n\n                for (let j = i + 1; j < nodes.length; j++) {\n                    let node_b = nodes[j];\n\n                    let prob_a = Math.floor(node_a.prob * 1000) / 1000,\n                        prob_b = Math.floor(node_b.prob * 1000) / 1000;\n\n                    if (\n                        node_a.code.length * node_b.code.length > 0 &&\n                        node_a.depth < node_b.depth &&\n                        prob_a < prob_b\n                    ) {\n                        // console.log('Something wrong with nodes:', nodes[i], nodes[j]);\n                        return false;\n                    }\n                }\n            }\n        } else {\n            return false;\n        }\n        return true;\n    }\n\n    static decodeMessage([msg], userAnswer) {\n        let nodes = [];\n        const collectNodes = (node, depth) => {\n            nodes.push(node);\n            if (node.children) for (let ch of node.children) collectNodes(ch, depth + 1);\n        };\n        collectNodes(userAnswer.additionalProperties.tree[0], 0);\n\n        let letters = {};\n        for (let n of nodes) {\n            if (!n.temporary) {\n                letters[n.title] = n.code;\n            }\n        }\n        return Array.from(msg)\n            .map((char) => letters[char])\n            .join('');\n    }\n\n    static checkAnswerAndReduce(taskDescription, userAnswer) {\n        let { mainAnswer, tree, huffmanCode } = this.solve(taskDescription.params);\n\n        let treeIsCorrect = this.checkTree(userAnswer.additionalProperties?.tree);\n        let isCorrect = false;\n        let decoded_msg = '';\n        if (treeIsCorrect) {\n            decoded_msg = this.decodeMessage(taskDescription.params, userAnswer);\n            if (decoded_msg === userAnswer.mainAnswer.value.toString()) isCorrect = true;\n        }\n\n        let answer = _.cloneDeep(userAnswer);\n        answer.additionalProperties.treeIsCorrect = treeIsCorrect;\n        answer.mainAnswer.correct = isCorrect;\n        answer.mainAnswer.correctAnswer = decoded_msg;\n\n        return answer;\n    }\n\n    static generateTask() {\n        let msgLength = 10;\n        let alphabetSize = randInt(3, 6);\n        let msg = Array(msgLength)\n            .fill(0)\n            .map((ch) =>\n                randInt(0, alphabetSize, (num) => String.fromCharCode('A'.charCodeAt(0) + num))\n            )\n            .join('');\n\n        this.solve([msg]);\n\n        let params = [msg];\n        return { params, text: this.getText(params) };\n    }\n\n    static getText(params) {\n        for (let i = 0; i < this.paramsLength; ++i)\n            params[i] = params[i] ?? String.fromCharCode('A'.charCodeAt(0) + i);\n        return `Построить двоичный код Хаффмана для алфавита использующегося в сообщении ${params[0]} и переписать это сообщение используя полученный код`;\n    }\n}\n","import { powerOfTwo, randDouble, randInt } from './utilities';\nimport {ProtoTask} from \"./_ProtoTask\";\n\n\nexport class SizeOfAlphabet extends ProtoTask {\n    static taskName = \"Размер алфавита\"\n    static paramsLength = 1;\n    static uses_calculator = true;\n\n    static solve([bitsInOneLetter]) {\n        return Math.pow(2, bitsInOneLetter);\n    }\n\n    static generateTask() {\n        let bitsInOneLetter = randInt(1, 11);\n        let params = [bitsInOneLetter];\n        return { params, text: this.getText(params) };\n    }\n\n    static getText(params) {\n        for (let i = 0; i < this.paramsLength; ++i)\n            params[i] = params[i] ?? String.fromCharCode('A'.charCodeAt(0) + i);\n        return `Из скольких букв состоит равновероятный алфавит, если одна буква этого алфавита несет ${params[0]} бит(а) информации?`;\n    }\n}\n\nexport class LengthOfMSG extends ProtoTask {\n    static taskName = \"Длина сообщения\"\n    static paramsLength = 2;\n    static uses_calculator = true;\n\n    static solve([a, b]) {\n        return b / Math.log2(a | 0);\n    }\n\n    static generateTask() {\n        let a = randDouble(4, 8, (n) => Math.pow(2, n | 0));\n        let b = randDouble(3, 7, (n) => Math.log2(a | 0) * (n | 0));\n        let params = [a, b];\n        return { params, text: this.getText(params) };\n    }\n\n    static getText(params) {\n        for (let i = 0; i < this.paramsLength; ++i)\n            params[i] = params[i] ?? String.fromCharCode('A'.charCodeAt(0) + i);\n        return `Сообщение составлено из символов равновероятного алфавита. Чему равно количество символов в этом сообщении, если известно, что алфавит состоит из ${params[0]} символов, а сообщение несет ${params[1]} бита информации`;\n    }\n}\n\nexport class Task3 extends ProtoTask {\n    static taskName = \"Кол-во информации на экране\"\n    static paramsLength = 3;\n    static uses_calculator = true;\n\n    static solve([a, b, c]) {\n        return a * b * Math.log2(c);\n    }\n\n    static generateTask() {\n        let a = randInt(2, 12, powerOfTwo);\n        let b = randInt(2, 12, powerOfTwo);\n        let c = randInt(1, 6, powerOfTwo);\n\n        let params = [a, b, c];\n        return { params, text: this.getText(params) };\n    }\n\n    static getText(params) {\n        for (let i = 0; i < this.paramsLength; ++i)\n            params[i] = params[i] ?? String.fromCharCode('A'.charCodeAt(0) + i);\n        return `Какое количество информации заключается в черно-белом изображении на телеэкране, если экран содержит ${params[0]} линий, каждая линия – ${params[1]} экранных точек, а каждая точка имеет ${params[2]} градаций яркости?`;\n    }\n}\n\nexport class Task4 extends ProtoTask {\n    static taskName = \"Максимальная энтропия системы\"\n    static paramsLength = 2;\n    static uses_calculator = true;\n\n    static solve([a, b]) {\n        return a * Math.log2(b);\n    }\n\n    static generateTask() {\n        let a = randInt(2, 100, (n) => n | 0);\n        let b = randInt(1, 6, powerOfTwo);\n        let params = [a, b];\n        return { params, text: this.getText(params) };\n    }\n\n    static getText(params) {\n        for (let i = 0; i < this.paramsLength; ++i)\n            params[i] = params[i] ?? String.fromCharCode('A'.charCodeAt(0) + i);\n        return `Определить максимальную энтропию системы, состоящей из ${params[0]} элементов, каждый из которых может находиться в одном из ${params[1]}-х состояний.`;\n    }\n}\n\nexport class Task5 extends ProtoTask {\n    static taskName = \"Энтропия алфавита\"\n    static paramsLength = 2;\n    static uses_calculator = true;\n\n    static solve([msg]) {\n        let letters = {};\n        for (let ch of Array.from(msg)) {\n            letters[ch] = letters[ch] ? letters[ch]+1 : 1;\n        }\n        let probs = {};\n        for (let [char, n] of Object.entries(letters)) {\n            probs[char] = n / msg.length;\n        }\n        let sum = 0;\n        for (let [char, prob] of Object.entries(probs)) {\n            sum += prob * Math.log2(prob)\n        }\n        sum *= -1;\n        sum = (Math.round(sum * 1000) | 0) / 1000;\n\n        return sum;\n    }\n\n    static generateTask() {\n        let msgLength = 10;\n        let alphabetSize = randInt(2, 4);\n        let msg = Array(msgLength)\n            .fill(0)\n            .map((ch) =>\n                randInt(0, alphabetSize, (num) =>\n                    String.fromCharCode('a'.charCodeAt(0) + num)\n                )\n            ).join('');\n\n        let params = [msg];\n        return { params, text: this.getText(params) };\n    }\n\n    static getText(params) {\n        for (let i = 0; i < this.paramsLength; ++i)\n            params[i] = params[i] ?? String.fromCharCode('A'.charCodeAt(0) + i);\n        return `Найти энтропию алфавита, задействованного в сообщении: \"${params[0]}. Ответ округлить до тысячных\"`;\n    }\n}\n","import { convertRadix, digitToChar, randBool, randDouble, randInt } from './utilities';\nimport { ProtoTask } from './_ProtoTask';\nimport _ from 'lodash';\n\nexport class ConvertDecimalToN extends ProtoTask {\n    static taskName = 'Конвертация из десятичной СС';\n    static paramsLength = 2;\n    static uses_calculator = true;\n    static uses_convert_table = true;\n\n    static additionalInformation() {\n        return 'Вам также следует заполнить таблицу перевода (правила вам известны). Для добавления новой строки, поставьте курсой на последнюю (строку) и нажмите Enter. Для удаления последней строки, поставьте курсор на последнюю и нажмите Backspace.';\n    }\n\n    static solve([number, base]) {\n        let remainderParts = [];\n        let intParts = [];\n        let n = number;\n        while (n > 0) {\n            remainderParts.push(n % base);\n            intParts.push(n);\n            n = (n / base) | 0;\n        }\n        return {\n            mainAnswer: remainderParts\n                .map((a) => digitToChar(a))\n                .reverse()\n                .join(''),\n            table: intParts.map((a, i) => [a, remainderParts[i]])\n        };\n    }\n\n    static checkAnswerAndReduce(taskDescription, userAnswer) {\n        let answer = _.cloneDeep(userAnswer);\n        let { mainAnswer, table } = this.solve(taskDescription.params);\n        answer.mainAnswer.correct =\n            mainAnswer.toString() === userAnswer.mainAnswer.value.toString();\n\n        // compare table\n        answer.additionalProperties.table = userAnswer.additionalProperties.table.map(\n            ([fst_col, snd_col], i) => [\n                { ...fst_col, correct: table[i] && fst_col.value === table[i][0].toString() },\n                { ...snd_col, correct: table[i] && snd_col.value === table[i][1].toString() }\n            ]\n        );\n        answer.mainAnswer.correctAnswer = mainAnswer.toString();\n\n        return answer;\n    }\n\n    static generateTask() {\n        let number = randInt(1, 1024);\n        let base = randInt(2, 17, (a) => (a === 10 ? 11 : a));\n        let params = [number, base];\n        return { params, text: this.getText(params) };\n    }\n\n    static getText(params) {\n        for (let i = 0; i < this.paramsLength; ++i)\n            params[i] = params[i] ?? String.fromCharCode('A'.charCodeAt(0) + i);\n        return `Перевести число ${params[0]} из десятичной системы в СС с основанием ${params[1]}.`;\n    }\n}\n\nexport class ConvertNtoDecimal extends ProtoTask {\n    static taskName = 'Конвертация в десятичную СС';\n    static paramsLength = 2;\n    static uses_calculator = true;\n\n    static solve([number, base]) {\n        return convertRadix(number, base, 10);\n    }\n\n    static generateTask() {\n        let base = randInt(2, 17, (a) => (a === 10 ? 11 : a));\n        let number = convertRadix(randInt(1, 1024), 10, base);\n        let params = [number, base];\n        return { params, text: this.getText(params) };\n    }\n\n    static getText(params) {\n        for (let i = 0; i < this.paramsLength; ++i)\n            params[i] = params[i] ?? String.fromCharCode('A'.charCodeAt(0) + i);\n        return `Перевести число ${params[0]} из системы счисления с основанием ${params[1]} в десятичную СС.`;\n    }\n}\n\nexport class ConvertDecimalFloatToN extends ProtoTask {\n    static taskName = 'Конвертация дроби из десятичной СС в двоичную';\n    static paramsLength = 2;\n    static uses_float_convert_table = true;\n    static uses_calculator = true;\n\n    static additionalInformation() {\n        return 'Вам также следует заполнить таблицу перевода (правила вам известны). Для добавления новой строки, поставьте курсой на последнюю (строку) и нажмите Enter. Для удаления последней строки, поставьте курсор на последнюю и нажмите Backspace.';\n    }\n\n    static solve([number, base]) {\n        let answer = '';\n        let num = number;\n        while (num !== 0) {\n            num *= base;\n            if (num < 1) {\n                answer += '0';\n            } else {\n                num -= num | 0;\n                answer += 1;\n            }\n        }\n        return answer;\n    }\n\n    static checkAnswerAndReduce(taskDescription, userAnswer) {\n        const userAnswerString = userAnswer.mainAnswer.value.toString().replace('0.', '');\n        const correctAnswer = this.solve(taskDescription.params).toString();\n        const isCorrect = correctAnswer === userAnswerString;\n        let answer = _.cloneDeep(userAnswer);\n        answer.mainAnswer.correct = isCorrect;\n        answer.mainAnswer.correctAnswer = correctAnswer;\n\n        return answer;\n    }\n\n    static generateTask() {\n        let length = randInt(1, 5);\n        let base = 2; //randInt(2, 16, (a) => (a === 10 ? 16 : a));\n\n        let ans = 0;\n        while (ans === 0) {\n            for (let i = 0; i < length; i++) {\n                ans += randBool() ? Math.pow(base, -i - 1) : 0;\n            }\n        }\n        let params = [ans, base];\n        return { params, text: this.getText(params) };\n    }\n\n    static getText(params) {\n        for (let i = 0; i < this.paramsLength; ++i)\n            params[i] = params[i] ?? String.fromCharCode('A'.charCodeAt(0) + i);\n        return `Перевести число с плавающей запятой ${params[0]} из десятичной системы в СС с основанием ${params[1]}.`;\n    }\n}\n\nexport class FloatRepresentationTask extends ProtoTask {\n    static taskName = 'Представление чисел с плавающей запятой';\n    static paramsLength = 1;\n    static uses_calculator = true;\n    static uses_float_grid = true;\n\n    static additionalInformation() {\n        return 'Для выделения диапазона битов, вам нужно мышкой переместить чёрные стрелочки (они находятся в нижнем правом углу разрядной сетки). Для изменения значения бита, нажимайте на X сверху.';\n    }\n\n    static solve([numberString]) {\n        let num = 0;\n        switch (numberString) {\n            case '-Infinity':\n                num = -Infinity;\n                break;\n            case 'Infinity':\n                num = Infinity;\n                break;\n            case '0':\n                num = 0;\n                break;\n            case 'NaN':\n                num = NaN;\n                break;\n            default:\n                num = Number.parseFloat(numberString);\n                break;\n        }\n        const answer = this.FloatToIEEE(num);\n        return answer;\n    }\n\n    static FloatToIEEE(f) {\n        let buf = new ArrayBuffer(8);\n        (new Float32Array(buf))[0] = f;\n        return ((new Uint32Array(buf))[0] >>> 0).toString(2).padStart(32, '0');\n    }\n\n    static IEEEToDouble(f) {\n        let buffer = new ArrayBuffer(8);\n        (new Uint32Array(buffer))[0] = Number.parseInt(f, 2);\n        return new Float32Array(buffer)[0];\n    }\n\n    static checkAnswerAndReduce(taskDescription, userAnswer) {\n        const correctAnswer = this.solve(taskDescription.params).toString();\n\n        let mainAnswerIsCorrect = correctAnswer === userAnswer.mainAnswer.value.toString();\n        let selectedBitsAreCorrect = true;\n        let enteredNumberIsCorrect = true;\n\n        const selectedBits = userAnswer.additionalProperties.float_grid.selectedBits;\n        const enteredNumber = userAnswer.additionalProperties.float_grid.enteredNumber;\n\n        if (!selectedBits) selectedBitsAreCorrect = false;\n        else if ([...selectedBits].sort().toString() !== [24, 31].toString()) selectedBitsAreCorrect = false;\n\n        if (!enteredNumber) enteredNumberIsCorrect = false;\n        if (enteredNumber !== correctAnswer) enteredNumberIsCorrect = false;\n        if (!selectedBitsAreCorrect || !enteredNumberIsCorrect) mainAnswerIsCorrect = false;\n\n        let answer = _.cloneDeep(userAnswer);\n        answer.mainAnswer.correct = mainAnswerIsCorrect;\n        answer.additionalProperties.float_grid.correct = enteredNumberIsCorrect;\n        answer.additionalProperties.float_grid.bitsCorrect = selectedBitsAreCorrect;\n        answer.mainAnswer.correctAnswer = correctAnswer;\n\n        return answer;\n    }\n\n    static generateTask() {\n        let specialCases = ['-Infinity', 'Infinity', '0', 'NaN'];\n        let useSpecialCase = randDouble(0, 1.0) < 0.3;\n\n        let length = randInt(0, 4);\n        let number = 0;\n        for (let i = 0; i < length; i++) {\n            number += randBool() ? Math.pow(2, -i - 1) : 0;\n        }\n        number += randInt(0, 32);\n        if (randBool()) number *= -1;\n\n        let toConvert = useSpecialCase ? specialCases[randInt(0, 4)] : number.toString();\n        let params = [toConvert];\n        return { params, text: this.getText(params) };\n    }\n\n    static getText(params) {\n        // +-Inf, 0, NaN\n        for (let i = 0; i < this.paramsLength; ++i)\n            params[i] = params[i] ?? String.fromCharCode('A'.charCodeAt(0) + i);\n        return `Выберите диапазон битов, выделенных для экспоненты в представлении числа с плавающей запятой.\n         А также запишите '${params[0]}' в эту разрядную сетку согласно правилам.`;\n    }\n}\n\n","import * as encodingTasks from './basic_encoding';\nimport * as informationTasks from './information_measurement';\nimport * as radixTasks from './positional_radix';\nimport { isClass } from './utilities';\n\n\nexport default function LoadAllTasks() {\n    const allTasks = [informationTasks, encodingTasks, radixTasks].flatMap((t, i) =>\n        Object.entries(t)\n            // .filter(([k, v]) => isClass(v))\n            .map(([k, v]) => v)\n    );\n    return allTasks;\n}\n","import React, { useState } from 'react';\nimport TestBlock from '../TestBlock/TestBlock';\nimport './App.css';\nimport _ from 'lodash';\nimport { Button, List, ListItem } from '@material-ui/core';\n\nimport getAllTasks from '../../Tasks/_LoadAllTasks';\nimport { UserAnswer } from '../../Tasks/utilities';\n\nlet allTasks = getAllTasks();\n\nlet initialTasks = [];\ninitInitialTasks(initialTasks);\n\nfunction initInitialTasks(initialTasks) {\n    let url = new URL(window.location.href);\n    let topics = {};\n    for (let [k, v] of url.searchParams) {\n        if (v === '') continue;\n        let name = k.split('_').join(' ');\n        topics[name] = parseInt(v);\n    }\n    for (let t of allTasks) {\n        if (t.taskName in topics) {\n            for (let i = 0; i < topics[t.taskName]; ++i) {\n                initialTasks.push(t);\n            }\n        }\n    }\n\n    if (initialTasks.length === 0) {\n        initialTasks.push(...allTasks);\n    }\n}\n\nconst createInitialTasks = (setTaskAnswers) =>\n    initialTasks.map((task, index) => {\n        let taskDescription = task.generateTask();\n\n        return {\n            taskClass: task,\n            taskDescription,\n            taskUpdateAnswer: (userAnswer) => {\n                setTaskAnswers((prevTaskAnswers) => {\n                    let taskAnswers = _.cloneDeep(prevTaskAnswers);\n                    taskAnswers[index] = task.checkAnswerAndReduce(taskDescription, userAnswer);\n                    return taskAnswers;\n                });\n            }\n        };\n    });\n\nfunction App() {\n\n    const [taskAnswers, setTaskAnswers] = useState(\n        new Array(initialTasks.length).fill(0).map((_) => new UserAnswer())\n    );\n    const [tasks, setTasks] = useState((_) => createInitialTasks(setTaskAnswers));\n    const [dontCheckCorrectAnswer] = useState(() => {\n        let url = new URL(window.location.href);\n        for (let [k, _] of url.searchParams)\n            if (k === 'dontCheckCorrectAnswers')\n                return true;\n        return false;\n    });\n\n    const flexContainer = {\n        display: 'flex',\n        flexDirection: 'row',\n        padding: 2,\n    };\n\n    return (\n        <>\n            <div className={'root'}>\n                <div className='TestBlock'>\n                    <TestBlock tasks={tasks} answers={taskAnswers} checkCorrectAnswer={!dontCheckCorrectAnswer} />\n                </div>\n            </div>\n        </>\n    );\n}\n\nexport default App;\n","import React, { useState } from 'react';\nimport './Settings.css';\nimport getAllTasks from '../../Tasks/_LoadAllTasks';\n\nlet allTasks = getAllTasks();\nlet initialTasks = [...allTasks];\n\nfunction ThemeChooser({ name, id, setChecked }) {\n    let [numberEnabled, setNumberEnabled] = useState(false);\n    let [text, setText] = useState('0');\n\n    const onChange = (e) => {\n        setText(numberEnabled ? '0' : '1');\n        setNumberEnabled(!numberEnabled);\n\n        setChecked((prevState) => {\n            let newState = prevState.map((a) => ({ ...a }));\n            newState[id].number = numberEnabled ? '0' : '1';\n            return newState;\n        });\n    };\n\n    const onTextEnter = (e) => {\n        setText(e.target.value);\n\n        let val = e.target.value;\n        setChecked((prevState) => {\n            let newState = prevState.map((a) => ({ ...a }));\n            newState[id].number = numberEnabled ? val : '0';\n            return newState;\n        });\n    };\n\n    return (\n        <div>\n            <label>\n                <input\n                    type='number'\n                    value={text}\n                    disabled={!numberEnabled}\n                    min={0}\n                    pattern={/[\\d]*/}\n                    onChange={onTextEnter}\n                    className={'nes-input'}\n                    style={{\n                        borderImageOutset: 0,\n                        margin: 1,\n                        width: '6ch'\n                    }}\n                />\n            </label>\n            <label>\n                <input\n                    id={'check' + id}\n                    type='checkbox'\n                    onChange={onChange}\n                    className={'nes-checkbox'}\n                />\n                <span>{name}</span>\n            </label>\n        </div>\n    );\n}\n\nfunction formatLink(pairs, showCorrectAnswersChecked) {\n    let mainLink = window.location.href.split('#')[0].split('?')[0];\n\n    let params = pairs\n        .filter((check) => check.number > 0)\n        .map((check) => `${check.name.split(' ').join('_')}=${check.number}`)\n        .join('&');\n    if (params.length > 0) {\n        mainLink += '?' + params;\n        if (showCorrectAnswersChecked)\n            mainLink += '&dontCheckCorrectAnswers=YES';\n    } else if (showCorrectAnswersChecked) {\n        mainLink += '?dontCheckCorrectAnswers=YES';\n    }\n\n    return mainLink;\n}\n\nexport default function Settings() {\n\n    const assignments = initialTasks.map((a) => a.taskName ?? a.name);\n    let checkedInit = assignments.map((name) => ({\n        name,\n        number: 0\n    }));\n    const [checked, setChecked] = useState(checkedInit);\n    const [showCorrectAnswersChecked, setShowCorrectAnswersChecked] = useState(false);\n    const showCorrectAnswerCheckBox = (<div style={{ padding: 10 }}>\n        <label>\n            <input\n                type='checkbox'\n                onChange={(e) => setShowCorrectAnswersChecked(e.target.checked)}\n                className={'nes-checkbox'}\n            />\n            <span> Не оценивать правильность решения до нажатия кнопки \"Проверить\" </span>\n        </label>\n    </div>);\n\n    return (\n        <div style={{ marginTop: 10 }} className={'nes-container is-rounded with-title task-list'}>\n            <div className={'title'}>Выбери тему и кол-во заданий</div>\n\n\n            {assignments.map((name, index) => (\n                <ThemeChooser name={name} id={index} key={index} setChecked={setChecked} />\n            ))}\n            {showCorrectAnswerCheckBox}\n\n            {checked.length !== 0 && (\n                <div className={'nes-text is-error'}>\n                    Ссылка:\n                    <a href={formatLink(checked, showCorrectAnswersChecked)}>{formatLink(checked, showCorrectAnswersChecked)}</a>\n                </div>\n            )}\n        </div>\n    );\n}\n","import App from './App/App';\nimport React from 'react';\nimport { Link, Route, Switch, HashRouter } from 'react-router-dom';\nimport Settings from './Settings/Settings';\nimport 'nes.css/css/nes.min.css';\nimport _ from \"lodash\";\n\n\nexport default function Main() {\n\n    return (\n        <div className={'root'}>\n            <HashRouter>\n                <div className=' nes-container with-title is-rounded'>\n                    <p className='title'>Выбор раздела</p>\n                    <Link style={{ marginRight: '-5px' }} className={'nes-btn'} to={'/'}>\n                        Тестирование\n                    </Link>\n                    <Link className={'nes-btn'} to={'/settings'}>\n                        Настройки\n                    </Link>\n\n                    <div className='nes-badge' style={{ marginLeft: '100px', width: '400px' }}>\n                        <span className='is-success'>Тесты-тесты-тесты!</span>\n                        <i className='nes-icon is-large star'/>\n                    </div>\n                </div>\n\n                <Switch>\n                    <Route path={['/settings']} component={Settings} />\n                    <Route path={['/']} component={App} />\n                </Switch>\n            </HashRouter>\n        </div>\n    );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport Main from \"./components/Main\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Main />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n","import React, { useState } from 'react';\nimport Popup from 'reactjs-popup';\nimport 'bootstrap-pixel-icons/bootstrap-pixel-icons.css';\n\nexport default function InfoPopup({ msg, scale=3, dir='left', width=400 }) {\n    if (msg.length === 0) return '';\n    return (\n        <Popup\n            trigger={\n                <span\n                    style={{\n                        fontSize: scale + 'em',\n                        color: 'green',\n                    }}\n                    className='px-question-circle nes-pointer'\n                />\n            }\n            position={dir === 'left' ? 'left bottom' : 'right bottom'}\n            on='hover'\n            closeOnDocumentClick\n            mouseLeaveDelay={100}\n            mouseEnterDelay={0}\n        >\n            <div style={{ width: width + 'px' }}>\n                <div className={'nes-balloon ' + (dir === 'left' ? 'from-right' : 'from-left')}>\n                    <p>{msg}</p>\n                </div>\n            </div>\n        </Popup>\n    );\n}\n","import React, { useState } from 'react';\nimport InfoPopup from './InfoPopup';\n\nexport function Calculator() {\n    const [inputNum, setInputNum] = useState('0');\n\n    let evaluationResult = '0';\n    try {\n        evaluationResult = eval(inputNum);\n    } catch (e) {}\n    if (typeof evaluationResult === 'object' || evaluationResult === '' || evaluationResult === undefined) {\n        evaluationResult = '???';\n    }\n\n    const helpMsg = \"Введите выражение, которое хотите посчитать (например, '2 + 2'). Использование математических функций происходит через модуль Math, т.е. если вам нужно посчитать логарифм по основанию 2, введите 'Math.log2(16)'\";\n\n    return (\n        <div style={{ textAlign: 'left', fontSize: '0.9rem' }}>\n            Калькулятор:\n            <InfoPopup msg={helpMsg} scale={1.5} dir={'right'} width={700} />\n            <input\n                className={'nes-input'}\n                style={{ width: '19rem', borderImageOutset: 0 }}\n                value={inputNum}\n                onChange={(e) => setInputNum(e.target.value)}\n                // pattern={'^[0-9]*$'}\n            />\n            = <label> {evaluationResult} </label>\n        </div>\n    );\n}\n"],"sourceRoot":""}